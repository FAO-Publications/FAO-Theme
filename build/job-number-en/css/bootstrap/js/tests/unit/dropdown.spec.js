import Dropdown from"../../src/dropdown";import EventHandler from"../../src/dom/event-handler";import{noop}from"../../src/util/index";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";describe("Dropdown",(()=>{let e;beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture()})),describe("VERSION",(()=>{it("should return plugin version",(()=>{expect(Dropdown.VERSION).toEqual(jasmine.any(String))}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(Dropdown.Default).toEqual(jasmine.any(Object))}))})),describe("DefaultType",(()=>{it("should return plugin default type config",(()=>{expect(Dropdown.DefaultType).toEqual(jasmine.any(Object))}))})),describe("DATA_KEY",(()=>{it("should return plugin data key",(()=>{expect(Dropdown.DATA_KEY).toEqual("bs.dropdown")}))})),describe("constructor",(()=>{it("should take care of element either passed as a CSS selector or DOM element",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown('[data-bs-toggle="dropdown"]'),n=new Dropdown(o);expect(t._element).toEqual(o),expect(n._element).toEqual(o)})),it("should work on invalid markup",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Link</a>',"  </div>","</div>"].join("");const t=e.querySelector(".dropdown-menu"),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{o()})),n.show()})))),it("should create offset modifier correctly when offset option is a function",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=jasmine.createSpy("getOffset").and.returnValue([10,20]),n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n,{offset:t,popperConfig:{onFirstUpdate(e){expect(t).toHaveBeenCalledWith({popper:e.rects.popper,reference:e.rects.reference,placement:e.placement},n),o()}}}),r=d._getOffset();expect(typeof r).toEqual("function"),d.show()})))),it("should create offset modifier correctly when offset option is a string into data attribute",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-offset="10,20">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);expect(t._getOffset()).toEqual([10,20])})),it("should allow to pass config to Popper with `popperConfig`",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o,{popperConfig:{placement:"left"}})._getPopperConfig();expect(t.placement).toEqual("left")})),it("should allow to pass config to Popper with `popperConfig` as a function",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-placement="right">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=jasmine.createSpy("getPopperConfig").and.returnValue({placement:"left"}),n=new Dropdown(o,{popperConfig:t})._getPopperConfig();expect(t).toHaveBeenCalled(),expect(n.placement).toEqual("left")}))})),describe("toggle",(()=>{it("should toggle a dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should destroy old popper references on toggle",(()=>new Promise((o=>{e.innerHTML=['<div class="first dropdown">','  <button class="firstBtn btn" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>",'<div class="second dropdown">','  <button class="secondBtn btn" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector(".firstBtn"),n=e.querySelector(".secondBtn"),d=e.querySelector(".first"),r=e.querySelector(".second"),s=new Dropdown(t);d.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),spyOn(s._popper,"destroy"),n.click()})),r.addEventListener("shown.bs.dropdown",(()=>setTimeout((()=>{expect(s._popper.destroy).toHaveBeenCalled(),o()})))),s.toggle()})))),it("should toggle a dropdown and add/remove event listener on mobile",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=document.documentElement.ontouchstart,n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);document.documentElement.ontouchstart=noop;const r=spyOn(EventHandler,"on"),s=spyOn(EventHandler,"off");n.addEventListener("shown.bs.dropdown",(()=>{expect(n).toHaveClass("show"),expect(n.getAttribute("aria-expanded")).toEqual("true"),expect(r).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),d.toggle()})),n.addEventListener("hidden.bs.dropdown",(()=>{expect(n).not.toHaveClass("show"),expect(n.getAttribute("aria-expanded")).toEqual("false"),expect(s).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=t,o()})),d.toggle()})))),it("should toggle a dropdown at the right",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu dropdown-menu-end">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should toggle a centered dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown-center">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should toggle a dropup",(()=>new Promise((o=>{e.innerHTML=['<div class="dropup">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropup"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),d.toggle()})))),it("should toggle a dropup centered",(()=>new Promise((o=>{e.innerHTML=['<div class="dropup-center">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropup-center"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),d.toggle()})))),it("should toggle a dropup at the right",(()=>new Promise((o=>{e.innerHTML=['<div class="dropup">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu dropdown-menu-end">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropup"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),d.toggle()})))),it("should toggle a dropend",(()=>new Promise((o=>{e.innerHTML=['<div class="dropend">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropend"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),d.toggle()})))),it("should toggle a dropstart",(()=>new Promise((o=>{e.innerHTML=['<div class="dropstart">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropstart"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),d.toggle()})))),it("should toggle a dropdown with parent reference",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:"parent"});t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should toggle a dropdown with a dom node reference",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:e});t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should toggle a dropdown with a jquery object reference",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:{0:e,jquery:"jQuery"}});t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.toggle()})))),it("should toggle a dropdown with a valid virtual element reference",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle visually-hidden" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n={nodeType:1,getBoundingClientRect:()=>({width:0,height:0,top:0,right:0,bottom:0,left:0})};expect((()=>new Dropdown(t,{reference:{}}))).toThrowError(TypeError,'DROPDOWN: Option "reference" provided type "object" without a required "getBoundingClientRect" method.'),expect((()=>new Dropdown(t,{reference:{getBoundingClientRect:"not-a-function"}}))).toThrowError(TypeError,'DROPDOWN: Option "reference" provided type "object" without a required "getBoundingClientRect" method.');const d=new Dropdown(t,{reference:n,popperConfig:{onFirstUpdate(){expect(r).toHaveBeenCalled(),expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}}}),r=spyOn(n,"getBoundingClientRect").and.callThrough();d.toggle()})))),it("should not toggle a dropdown if the element is disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.toggle(),setTimeout((()=>{expect().nothing(),o()}))})))),it("should not toggle a dropdown if the element contains .disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.toggle(),setTimeout((()=>{expect().nothing(),o()}))})))),it("should not toggle a dropdown if the menu is shown",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.toggle(),setTimeout((()=>{expect().nothing(),o()}))})))),it("should not toggle a dropdown if show event is prevented",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("show.bs.dropdown",(e=>{e.preventDefault()})),n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.toggle(),setTimeout((()=>{expect().nothing(),o()}))}))))})),describe("show",(()=>{it("should show a dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),o()})),n.show()})))),it("should not show a dropdown if the element is disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.show(),setTimeout((()=>{expect().nothing(),o()}),10)})))),it("should not show a dropdown if the element contains .disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.show(),setTimeout((()=>{expect().nothing(),o()}),10)})))),it("should not show a dropdown if the menu is shown",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.show(),setTimeout((()=>{expect().nothing(),o()}),10)})))),it("should not show a dropdown if show event is prevented",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("show.bs.dropdown",(e=>{e.preventDefault()})),n.addEventListener("shown.bs.dropdown",(()=>{t(new Error("should not throw shown.bs.dropdown event"))})),d.show(),setTimeout((()=>{expect().nothing(),o()}),10)}))))})),describe("hide",(()=>{it("should hide a dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="true">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("hidden.bs.dropdown",(()=>{expect(n).not.toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("false"),o()})),d.hide()})))),it("should hide a dropdown and destroy popper",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{spyOn(n._popper,"destroy"),n.hide()})),t.addEventListener("hidden.bs.dropdown",(()=>{expect(n._popper.destroy).toHaveBeenCalled(),o()})),n.show()})))),it("should not hide a dropdown if the element is disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=e.querySelector(".dropdown-menu"),r=new Dropdown(n);n.addEventListener("hidden.bs.dropdown",(()=>{t(new Error("should not throw hidden.bs.dropdown event"))})),r.hide(),setTimeout((()=>{expect(d).toHaveClass("show"),o()}),10)})))),it("should not hide a dropdown if the element contains .disabled",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=e.querySelector(".dropdown-menu"),r=new Dropdown(n);n.addEventListener("hidden.bs.dropdown",(()=>{t(new Error("should not throw hidden.bs.dropdown event"))})),r.hide(),setTimeout((()=>{expect(d).toHaveClass("show"),o()}),10)})))),it("should not hide a dropdown if the menu is not shown",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);n.addEventListener("hidden.bs.dropdown",(()=>{t(new Error("should not throw hidden.bs.dropdown event"))})),d.hide(),setTimeout((()=>{expect().nothing(),o()}),10)})))),it("should not hide a dropdown if hide event is prevented",(()=>new Promise(((o,t)=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const n=e.querySelector('[data-bs-toggle="dropdown"]'),d=e.querySelector(".dropdown-menu"),r=new Dropdown(n);n.addEventListener("hide.bs.dropdown",(e=>{e.preventDefault()})),n.addEventListener("hidden.bs.dropdown",(()=>{t(new Error("should not throw hidden.bs.dropdown event"))})),r.hide(),setTimeout((()=>{expect(d).toHaveClass("show"),o()}))})))),it("should remove event listener on touch-enabled device that was added in show method",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>","</div>"].join("");const t=document.documentElement.ontouchstart,n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);document.documentElement.ontouchstart=noop;const r=spyOn(EventHandler,"off");n.addEventListener("shown.bs.dropdown",(()=>{d.hide()})),n.addEventListener("hidden.bs.dropdown",(()=>{expect(n).not.toHaveClass("show"),expect(n.getAttribute("aria-expanded")).toEqual("false"),expect(r).toHaveBeenCalled(),document.documentElement.ontouchstart=t,o()})),d.show()}))))})),describe("dispose",(()=>{it("should dispose dropdown",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);expect(t._popper).toBeNull(),expect(t._menu).not.toBeNull(),expect(t._element).not.toBeNull();const n=spyOn(EventHandler,"off");t.dispose(),expect(t._menu).toBeNull(),expect(t._element).toBeNull(),expect(n).toHaveBeenCalledWith(o,Dropdown.EVENT_KEY)})),it("should dispose dropdown with Popper",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);t.toggle(),expect(t._popper).not.toBeNull(),expect(t._menu).not.toBeNull(),expect(t._element).not.toBeNull(),t.dispose(),expect(t._popper).toBeNull(),expect(t._menu).toBeNull(),expect(t._element).toBeNull()}))})),describe("update",(()=>{it("should call Popper and detect navbar on update",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);t.toggle(),expect(t._popper).not.toBeNull();const n=spyOn(t._popper,"update"),d=spyOn(t,"_detectNavbar");t.update(),expect(n).toHaveBeenCalled(),expect(d).toHaveBeenCalled()})),it("should just detect navbar on update",(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o),n=spyOn(t,"_detectNavbar");t.update(),expect(t._popper).toBeNull(),expect(n).toHaveBeenCalled()}))})),describe("data-api",(()=>{it("should show and hide a dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');let n=!1,d=!1;t.addEventListener("show.bs.dropdown",(()=>{n=!0})),t.addEventListener("shown.bs.dropdown",(e=>setTimeout((()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),expect(n).toBeTrue(),expect(e.relatedTarget).toEqual(t),document.body.click()})))),t.addEventListener("hide.bs.dropdown",(()=>{d=!0})),t.addEventListener("hidden.bs.dropdown",(e=>{expect(t).not.toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("false"),expect(d).toBeTrue(),expect(e.relatedTarget).toEqual(t),o()})),t.click()})))),it('should not use "static" Popper in navbar',(()=>new Promise((o=>{e.innerHTML=['<nav class="navbar navbar-expand-md bg-light">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>',"    </div>","  </div>","</nav>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(d._popper).not.toBeNull(),expect(n.getAttribute("data-bs-popper")).toEqual("static"),o()})),d.show()})))),it("should not collapse the dropdown when clicking a select option nested in the dropdown",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">',"    <select>","      <option selected>Open this select menu</option>",'      <option value="1">One</option>',"    </select>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t),r=spyOn(d,"_completeHide");t.addEventListener("shown.bs.dropdown",(()=>{const e=new MouseEvent("click",{bubbles:!0});n.querySelector("option").dispatchEvent(e)})),n.addEventListener("click",(e=>{expect(e.target.tagName).toMatch(/select|option/i),Dropdown.clearMenus(e),setTimeout((()=>{expect(r).not.toHaveBeenCalled(),o()}),10)})),d.show()})))),it('should manage bs attribute `data-bs-popper`="static" when dropdown is in navbar',(()=>new Promise((o=>{e.innerHTML=['<nav class="navbar navbar-expand-md bg-light">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>',"    </div>","  </div>","</nav>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(n.getAttribute("data-bs-popper")).toEqual("static"),d.hide()})),t.addEventListener("hidden.bs.dropdown",(()=>{expect(n.getAttribute("data-bs-popper")).toBeNull(),o()})),d.show()})))),it("should not use Popper if display set to static",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",(()=>{expect(n.getAttribute("data-popper-placement")).toBeNull(),o()})),t.click()})))),it('should manage bs attribute `data-bs-popper`="static" when display set to static',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",(()=>{expect(n.getAttribute("data-bs-popper")).toEqual("static"),d.hide()})),t.addEventListener("hidden.bs.dropdown",(()=>{expect(n.getAttribute("data-bs-popper")).toBeNull(),o()})),d.show()})))),it('should remove "show" class if tabbing outside of menu',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show");const e=createEvent("keyup");e.key="Tab",document.dispatchEvent(e)})),t.addEventListener("hidden.bs.dropdown",(()=>{expect(t).not.toHaveClass("show"),o()})),t.click()})))),it('should remove "show" class if body is clicked, with multiple dropdowns',(()=>new Promise((o=>{e.innerHTML=['<div class="nav">','  <div class="dropdown" id="testmenu">','    <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#testmenu">Test menu</a>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#sub1">Submenu 1</a>',"    </div>","  </div>","</div>",'<div class="btn-group">','  <button class="btn">Actions</button>','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown"></button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Action 1</a>',"  </div>","</div>"].join("");const t=e.querySelectorAll('[data-bs-toggle="dropdown"]');expect(t).toHaveSize(2);const[n,d]=t;n.addEventListener("shown.bs.dropdown",(()=>{expect(n).toHaveClass("show"),expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(1),document.body.click()})),n.addEventListener("hidden.bs.dropdown",(()=>{expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(0),d.click()})),d.addEventListener("shown.bs.dropdown",(()=>{expect(d).toHaveClass("show"),expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(1),document.body.click()})),d.addEventListener("hidden.bs.dropdown",(()=>{expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(0),o()})),n.click()})))),it('should remove "show" class if body if tabbing outside of menu, with multiple dropdowns',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#testmenu">Test menu</a>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>',"  </div>","</div>",'<div class="btn-group">','  <button class="btn">Actions</button>','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown"></button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Action 1</a>',"  </div>","</div>"].join("");const t=e.querySelectorAll('[data-bs-toggle="dropdown"]');expect(t).toHaveSize(2);const[n,d]=t;n.addEventListener("shown.bs.dropdown",(()=>{expect(n).toHaveClass("show"),expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(1);const o=createEvent("keyup");o.key="Tab",document.dispatchEvent(o)})),n.addEventListener("hidden.bs.dropdown",(()=>{expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(0),d.click()})),d.addEventListener("shown.bs.dropdown",(()=>{expect(d).toHaveClass("show"),expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(1);const o=createEvent("keyup");o.key="Tab",document.dispatchEvent(o)})),d.addEventListener("hidden.bs.dropdown",(()=>{expect(e.querySelectorAll(".dropdown-menu.show")).toHaveSize(0),o()})),n.click()})))),it("should be able to identify clicked dropdown, even with multiple dropdowns in the same tag",(()=>{e.innerHTML=['<div class="dropdown">','  <button id="dropdown1" class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown toggle</button>','  <div id="menu1" class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>",'  <button id="dropdown2" class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown toggle</button>','  <div id="menu2" class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>","</div>"].join("");const o=e.querySelector("#dropdown1"),t=e.querySelector("#dropdown2"),n=e.querySelector("#menu1"),d=e.querySelector("#menu2"),r=spyOn(Dropdown,"getOrCreateInstance").and.callThrough();o.click(),expect(r).toHaveBeenCalledWith(o),t.click(),expect(r).toHaveBeenCalledWith(t),n.click(),expect(r).toHaveBeenCalledWith(o),d.click(),expect(r).toHaveBeenCalledWith(t)})),it("should be able to show the proper menu, even with multiple dropdowns in the same tag",(()=>{e.innerHTML=['<div class="dropdown">','  <button id="dropdown1" class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown toggle</button>','  <div id="menu1" class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>",'  <button id="dropdown2" class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown toggle</button>','  <div id="menu2" class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>","</div>"].join("");const o=e.querySelector("#dropdown1"),t=e.querySelector("#dropdown2"),n=e.querySelector("#menu1"),d=e.querySelector("#menu2");o.click(),expect(n).toHaveClass("show"),expect(d).not.toHaveClass("show"),t.click(),expect(n).not.toHaveClass("show"),expect(d).toHaveClass("show")})),it("should fire hide and hidden event without a clickEvent if event type is not click",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("hide.bs.dropdown",(e=>{expect(e.clickEvent).toBeUndefined()})),t.addEventListener("hidden.bs.dropdown",(e=>{expect(e.clickEvent).toBeUndefined(),o()})),t.addEventListener("shown.bs.dropdown",(()=>{const e=createEvent("keydown");e.key="Escape",t.dispatchEvent(e)})),t.click()})))),it("should bubble up the events to the parent elements",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#subMenu">Sub menu</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown"),d=new Dropdown(t),r=jasmine.createSpy("showFunction");n.addEventListener("show.bs.dropdown",r);const s=jasmine.createSpy("shownFunction");n.addEventListener("shown.bs.dropdown",(()=>{s(),d.hide()}));const a=jasmine.createSpy("hideFunction");n.addEventListener("hide.bs.dropdown",a),n.addEventListener("hidden.bs.dropdown",(()=>{expect(r).toHaveBeenCalled(),expect(s).toHaveBeenCalled(),expect(a).toHaveBeenCalled(),o()})),d.show()})))),it("should ignore keyboard events within <input>s and <textarea>s",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>','    <input type="text">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input"),d=e.querySelector("textarea");t.addEventListener("shown.bs.dropdown",(()=>{n.focus();const e=createEvent("keydown");e.key="ArrowUp",n.dispatchEvent(e),expect(document.activeElement).toEqual(n,"input still focused"),d.focus(),d.dispatchEvent(e),expect(document.activeElement).toEqual(d,"textarea still focused"),o()})),t.click()})))),it("should skip disabled element when using keyboard navigation",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item disabled" href="#sub1">Submenu 1</a>','    <button class="dropdown-item" type="button" disabled>Disabled button</button>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",(()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),t.dispatchEvent(e),expect(document.activeElement).not.toHaveClass("disabled"),expect(document.activeElement.hasAttribute("disabled")).toBeFalse(),o()})),t.click()})))),it("should skip hidden element when using keyboard navigation",(()=>new Promise((o=>{e.innerHTML=["<style>","  .d-none {","    display: none;","  }","</style>",'<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <button class="dropdown-item d-none" type="button">Hidden button by class</button>','    <a class="dropdown-item" href="#sub1" style="display: none">Hidden link</a>','    <a class="dropdown-item" href="#sub1" style="visibility: hidden">Hidden link</a>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",(()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),expect(document.activeElement).not.toHaveClass("d-none"),expect(document.activeElement.style.display).not.toEqual("none"),expect(document.activeElement.style.visibility).not.toEqual("hidden"),o()})),t.click()})))),it("should focus next/previous element when using keyboard navigation",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item1"),d=e.querySelector("#item2");t.addEventListener("shown.bs.dropdown",(()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),expect(document.activeElement).toEqual(n,"item1 is focused"),document.activeElement.dispatchEvent(e),expect(document.activeElement).toEqual(d,"item2 is focused");const r=createEvent("keydown");r.key="ArrowUp",document.activeElement.dispatchEvent(r),expect(document.activeElement).toEqual(n,"item1 is focused"),o()})),t.click()})))),it("should open the dropdown and focus on the last item when using ArrowUp for the first time",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item2");t.addEventListener("shown.bs.dropdown",(()=>{setTimeout((()=>{expect(document.activeElement).toEqual(n,"item2 is focused"),o()}))}));const d=createEvent("keydown");d.key="ArrowUp",t.dispatchEvent(d)})))),it("should open the dropdown and focus on the first item when using ArrowDown for the first time",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item1");t.addEventListener("shown.bs.dropdown",(()=>{setTimeout((()=>{expect(document.activeElement).toEqual(n,"item1 is focused"),o()}))}));const d=createEvent("keydown");d.key="ArrowDown",t.dispatchEvent(d)})))),it("should not close the dropdown if the user clicks on a text field within dropdown-menu",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <input type="text">',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input");n.addEventListener("click",(()=>{expect(t).toHaveClass("show"),o()})),t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),n.dispatchEvent(createEvent("click"))})),t.click()})))),it("should not close the dropdown if the user clicks on a textarea within dropdown-menu",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("textarea");n.addEventListener("click",(()=>{expect(t).toHaveClass("show"),o()})),t.addEventListener("shown.bs.dropdown",(()=>{expect(t).toHaveClass("show"),n.dispatchEvent(createEvent("click"))})),t.click()})))),it("should close the dropdown if the user clicks on a text field that is not contained within dropdown-menu",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">',"  </div>","</div>",'<input type="text">'].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input");t.addEventListener("hidden.bs.dropdown",(()=>{expect().nothing(),o()})),t.addEventListener("shown.bs.dropdown",(()=>{n.dispatchEvent(createEvent("click",{bubbles:!0}))})),t.click()})))),it("should ignore keyboard events for <input>s and <textarea>s within dropdown-menu, except for escape key",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>','    <input type="text">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input"),d=e.querySelector("textarea"),r=(e,o)=>{const t=createEvent("keydown");t.key=e,o.focus(),o.dispatchEvent(t),expect(document.activeElement).toEqual(o,`${o.tagName} still focused`)},s=createEvent("keydown");s.key="Escape",t.addEventListener("shown.bs.dropdown",(()=>{r("Space",n),r("Space",d),r("ArrowUp",n),r("ArrowUp",d),r("ArrowDown",n),r("ArrowDown",d),n.focus(),n.dispatchEvent(s),expect(t).not.toHaveClass("show"),o()})),t.click()})))),it("should not open dropdown if escape key was pressed on the toggle",(()=>new Promise((o=>{e.innerHTML=['<div class="tabs">','  <div class="dropdown">','    <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>','      <a class="dropdown-item" href="#">Something else here</a>','      <div class="divider"></div>','      <a class="dropdown-item" href="#">Another link</a>',"    </div>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t),d=e.querySelector('button[data-bs-toggle="dropdown"]'),r=spyOn(n,"toggle");d.focus();const s=createEvent("keydown");s.key="Escape",d.dispatchEvent(s),setTimeout((()=>{expect(r).not.toHaveBeenCalled(),expect(t).not.toHaveClass("show"),o()}),20)})))),it("should propagate escape key events if dropdown is closed",(()=>new Promise((o=>{e.innerHTML=['<div class="parent">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Some Item</a>',"    </div>","  </div>","</div>"].join("");const t=e.querySelector(".parent"),n=e.querySelector('[data-bs-toggle="dropdown"]'),d=jasmine.createSpy("parentKeyHandler");t.addEventListener("keydown",d),t.addEventListener("keyup",(()=>{expect(d).toHaveBeenCalled(),o()}));const r=createEvent("keydown",{bubbles:!0});r.key="Escape";const s=createEvent("keyup",{bubbles:!0});s.key="Escape",n.focus(),n.dispatchEvent(r),n.dispatchEvent(s)})))),it("should not propagate escape key events if dropdown is open",(()=>new Promise((o=>{e.innerHTML=['<div class="parent">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Some Item</a>',"    </div>","  </div>","</div>"].join("");const t=e.querySelector(".parent"),n=e.querySelector('[data-bs-toggle="dropdown"]'),d=jasmine.createSpy("parentKeyHandler");t.addEventListener("keydown",d),t.addEventListener("keyup",(()=>{expect(d).not.toHaveBeenCalled(),o()}));const r=createEvent("keydown",{bubbles:!0});r.key="Escape";const s=createEvent("keyup",{bubbles:!0});s.key="Escape",n.click(),n.dispatchEvent(r),n.dispatchEvent(s)})))),it("should close dropdown using `escape` button, and return focus to its trigger",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Some Item</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",(()=>{const e=createEvent("keydown",{bubbles:!0});e.key="ArrowDown",t.dispatchEvent(e),e.key="Escape",t.dispatchEvent(e)})),t.addEventListener("hidden.bs.dropdown",(()=>setTimeout((()=>{expect(document.activeElement).toEqual(t),o()})))),t.click()})))),it('should close dropdown (only) by clicking inside the dropdown menu when it has data-attribute `data-bs-auto-close="inside"`',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="inside">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",(()=>{document.documentElement.click(),setTimeout((()=>{expect(t).toHaveClass("show"),n.click()}),150)})),t.addEventListener("hidden.bs.dropdown",(()=>setTimeout((()=>{expect(t).not.toHaveClass("show"),o()})))),t.click()})))),it('should close dropdown (only) by clicking outside the dropdown menu when it has data-attribute `data-bs-auto-close="outside"`',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",(()=>{n.click(),setTimeout((()=>{expect(t).toHaveClass("show"),document.documentElement.click()}),150)})),t.addEventListener("hidden.bs.dropdown",(()=>{expect(t).not.toHaveClass("show"),o()})),t.click()})))),it('should not close dropdown by clicking inside or outside the dropdown menu when it has data-attribute `data-bs-auto-close="false"`',(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="false">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=(e=!0)=>setTimeout((()=>{expect(t).toHaveClass("show"),e?document.documentElement.click():o(),d(!1)}),150);t.addEventListener("shown.bs.dropdown",(()=>{n.click(),d()})),t.click()})))),it("should be able to identify clicked dropdown, no matter the markup order",(()=>{e.innerHTML=['<div class="dropdown">','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>',"  </div>",'  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown toggle</button>',"</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=e.querySelector(".dropdown-menu"),n=spyOn(Dropdown,"getOrCreateInstance").and.callThrough();o.click(),expect(n).toHaveBeenCalledWith(o),t.click(),expect(n).toHaveBeenCalledWith(o)}))})),describe("jQueryInterface",(()=>{it("should create a dropdown",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.dropdown.call(jQueryMock),expect(Dropdown.getInstance(o)).not.toBeNull()})),it("should not re create a dropdown",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.dropdown.call(jQueryMock),expect(Dropdown.getInstance(o)).toEqual(t)})),it("should throw error on undefined method",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t="undefinedMethod";jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],expect((()=>{jQueryMock.fn.dropdown.call(jQueryMock,t)})).toThrowError(TypeError,`No method named "${t}"`)}))})),describe("getInstance",(()=>{it("should return dropdown instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);expect(Dropdown.getInstance(o)).toEqual(t),expect(Dropdown.getInstance(o)).toBeInstanceOf(Dropdown)})),it("should return null when there is no dropdown instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toBeNull()}))})),describe("getOrCreateInstance",(()=>{it("should return dropdown instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);expect(Dropdown.getOrCreateInstance(o)).toEqual(t),expect(Dropdown.getInstance(o)).toEqual(Dropdown.getOrCreateInstance(o,{})),expect(Dropdown.getOrCreateInstance(o)).toBeInstanceOf(Dropdown)})),it("should return new instance when there is no dropdown instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toBeNull(),expect(Dropdown.getOrCreateInstance(o)).toBeInstanceOf(Dropdown)})),it("should return new instance when there is no dropdown instance with given configuration",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toBeNull();const t=Dropdown.getOrCreateInstance(o,{display:"dynamic"});expect(t).toBeInstanceOf(Dropdown),expect(t._config.display).toEqual("dynamic")})),it("should return the instance when exists without given configuration",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o,{display:"dynamic"});expect(Dropdown.getInstance(o)).toEqual(t);const n=Dropdown.getOrCreateInstance(o,{display:"static"});expect(t).toBeInstanceOf(Dropdown),expect(n).toEqual(t),expect(n._config.display).toEqual("dynamic")}))})),it("should open dropdown when pressing keydown or keyup",(()=>new Promise((o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item disabled" href="#sub1">Submenu 1</a>','    <button class="dropdown-item" type="button" disabled>Disabled button</button>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown"),d=createEvent("keydown");d.key="ArrowDown";const r=createEvent("keyup");r.key="ArrowUp",n.addEventListener("shown.bs.dropdown",(e=>{"ArrowDown"===e.target.key?(expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),setTimeout((()=>{n.hide(),d.key="ArrowUp",t.dispatchEvent(r)}),20)):(expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o())})),t.dispatchEvent(d)})))),it('should allow `data-bs-toggle="dropdown"` click events to bubble up',(()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=jasmine.createSpy("clickListener"),n=jasmine.createSpy("delegatedClickListener");o.addEventListener("click",t),document.addEventListener("click",n),o.click(),expect(t).toHaveBeenCalled(),expect(n).toHaveBeenCalled()})),it('should open the dropdown when clicking the child element inside `data-bs-toggle="dropdown"`',(()=>new Promise((o=>{e.innerHTML=['<div class="container">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown"><span id="childElement">Dropdown</span></button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#subMenu">Sub menu</a>',"    </div>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#childElement");t.addEventListener("shown.bs.dropdown",(()=>setTimeout((()=>{expect(t).toHaveClass("show"),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})))),n.click()}))))}));