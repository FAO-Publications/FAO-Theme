import Data from"../../../src/dom/data";import{getFixture,clearFixture}from"../../helpers/fixture";describe("Data",(()=>{const e="bs.test",t="bs.unknown",a={test:"bsData"};let o,n;beforeAll((()=>{o=getFixture()})),beforeEach((()=>{o.innerHTML="<div></div>",n=o.querySelector("div")})),afterEach((()=>{Data.remove(n,e),clearFixture()})),it("should return null for unknown elements",(()=>{const t={...a};Data.set(n,e,t),expect(Data.get(null)).toBeNull(),expect(Data.get(void 0)).toBeNull(),expect(Data.get(document.createElement("div"),e)).toBeNull()})),it("should return null for unknown keys",(()=>{const o={...a};Data.set(n,e,o),expect(Data.get(n,null)).toBeNull(),expect(Data.get(n,void 0)).toBeNull(),expect(Data.get(n,t)).toBeNull()})),it("should store data for an element with a given key and return it",(()=>{const t={...a};Data.set(n,e,t),expect(Data.get(n,e)).toEqual(t)})),it("should overwrite data if something is already stored",(()=>{const t={...a},o={...t};Data.set(n,e,t),Data.set(n,e,o),expect(Data.get(n,e)).not.toBe(t),expect(Data.get(n,e)).toBe(o)})),it("should do nothing when an element has nothing stored",(()=>{Data.remove(n,e),expect().nothing()})),it("should remove nothing for an unknown key",(()=>{const o={...a};Data.set(n,e,o),Data.remove(n,t),expect(Data.get(n,e)).toEqual(o)})),it("should remove data for a given key",(()=>{const t={...a};Data.set(n,e,t),Data.remove(n,e),expect(Data.get(n,e)).toBeNull()})),it("should console.error a message if called with multiple keys",(()=>{console.error=jasmine.createSpy("console.error");const o={...a},r={...o};Data.set(n,e,o),Data.set(n,t,r),expect(console.error).toHaveBeenCalled(),expect(Data.get(n,t)).toBeNull()}))}));