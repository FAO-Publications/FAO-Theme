import EventHandler from"../../../src/dom/event-handler";import{clearFixture,getFixture}from"../../helpers/fixture";import{noop}from"../../../src/util";describe("EventHandler",(()=>{let e;beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture()})),describe("on",(()=>{it("should not add event listener if the event is not a string",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");EventHandler.on(n,null,noop),EventHandler.on(null,"click",noop),expect().nothing()})),it("should add event listener",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");EventHandler.on(t,"click",(()=>{expect().nothing(),n()})),t.click()})))),it("should add namespaced event listener",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");EventHandler.on(t,"bs.namespace",(()=>{expect().nothing(),n()})),EventHandler.trigger(t,"bs.namespace")})))),it("should add native namespaced event listener",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");EventHandler.on(t,"click.namespace",(()=>{expect().nothing(),n()})),EventHandler.trigger(t,"click")})))),it("should handle event delegation",(()=>new Promise((n=>{EventHandler.on(document,"click",".test",(()=>{expect().nothing(),n()})),e.innerHTML='<div class="test"></div>',e.querySelector("div").click()})))),it("should handle mouseenter/mouseleave like the native counterpart",(()=>new Promise((n=>{e.innerHTML=['<div class="outer">','<div class="inner">','<div class="nested">','<div class="deep"></div>',"</div>","</div>",'<div class="sibling"></div>',"</div>"].join("");const t=e.querySelector(".outer"),r=e.querySelector(".inner"),o=e.querySelector(".nested"),i=e.querySelector(".deep"),l=e.querySelector(".sibling"),a=jasmine.createSpy("mouseenter"),c=jasmine.createSpy("mouseleave"),d=jasmine.createSpy("mouseenter"),s=jasmine.createSpy("mouseleave");EventHandler.on(r,"mouseenter",a),EventHandler.on(r,"mouseleave",c),EventHandler.on(t,"mouseenter",".inner",d),EventHandler.on(t,"mouseleave",".inner",s),EventHandler.on(l,"mouseenter",(()=>{expect(a.calls.count()).toEqual(2),expect(c.calls.count()).toEqual(2),expect(d.calls.count()).toEqual(2),expect(s.calls.count()).toEqual(2),n()}));const v=(e,n)=>{e.dispatchEvent(new MouseEvent("mouseout",{bubbles:!0,relatedTarget:n})),n.dispatchEvent(new MouseEvent("mouseover",{bubbles:!0,relatedTarget:e}))};v(t,r),v(r,o),v(o,i),v(i,o),v(o,r),v(r,t),setTimeout((()=>{expect(a.calls.count()).toEqual(1),expect(c.calls.count()).toEqual(1),expect(d.calls.count()).toEqual(1),expect(s.calls.count()).toEqual(1),v(t,r),v(r,l)}),20)}))))})),describe("one",(()=>{it("should call listener just once",(()=>new Promise((n=>{e.innerHTML="<div></div>";let t=0;const r=e.querySelector("div"),o={oneListener(){t++}};EventHandler.one(r,"bootstrap",o.oneListener),EventHandler.trigger(r,"bootstrap"),EventHandler.trigger(r,"bootstrap"),setTimeout((()=>{expect(t).toEqual(1),n()}),20)})))),it("should call delegated listener just once",(()=>new Promise((n=>{e.innerHTML="<div></div>";let t=0;const r=e.querySelector("div"),o={oneListener(){t++}};EventHandler.one(e,"bootstrap","div",o.oneListener),EventHandler.trigger(r,"bootstrap"),EventHandler.trigger(r,"bootstrap"),setTimeout((()=>{expect(t).toEqual(1),n()}),20)}))))})),describe("off",(()=>{it("should not remove a listener",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");EventHandler.off(n,null,noop),EventHandler.off(null,"click",noop),expect().nothing()})),it("should remove a listener",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0;const o=()=>{r++};EventHandler.on(t,"foobar",o),EventHandler.trigger(t,"foobar"),EventHandler.off(t,"foobar",o),EventHandler.trigger(t,"foobar"),setTimeout((()=>{expect(r).toEqual(1),n()}),20)})))),it("should remove all the events",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0;EventHandler.on(t,"foobar",(()=>{r++})),EventHandler.on(t,"foobar",(()=>{r++})),EventHandler.trigger(t,"foobar"),EventHandler.off(t,"foobar"),EventHandler.trigger(t,"foobar"),setTimeout((()=>{expect(r).toEqual(2),n()}),20)})))),it("should remove all the namespaced listeners if namespace is passed",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0;EventHandler.on(t,"foobar.namespace",(()=>{r++})),EventHandler.on(t,"foofoo.namespace",(()=>{r++})),EventHandler.trigger(t,"foobar.namespace"),EventHandler.trigger(t,"foofoo.namespace"),EventHandler.off(t,".namespace"),EventHandler.trigger(t,"foobar.namespace"),EventHandler.trigger(t,"foofoo.namespace"),setTimeout((()=>{expect(r).toEqual(2),n()}),20)})))),it("should remove the namespaced listeners",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0,o=0;EventHandler.on(t,"foobar.namespace",(()=>{r++})),EventHandler.on(t,"foofoo.namespace",(()=>{o++})),EventHandler.trigger(t,"foobar.namespace"),EventHandler.off(t,"foobar.namespace"),EventHandler.trigger(t,"foobar.namespace"),EventHandler.trigger(t,"foofoo.namespace"),setTimeout((()=>{expect(r).toEqual(1),expect(o).toEqual(1),n()}),20)})))),it("should remove the all the namespaced listeners for native events",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0;EventHandler.on(t,"click.namespace",(()=>{r++})),EventHandler.on(t,"click.namespace2",(()=>{r++})),EventHandler.trigger(t,"click"),EventHandler.off(t,"click"),EventHandler.trigger(t,"click"),setTimeout((()=>{expect(r).toEqual(2),n()}),20)})))),it("should remove the specified namespaced listeners for native events",(()=>new Promise((n=>{e.innerHTML="<div></div>";const t=e.querySelector("div");let r=0,o=0;EventHandler.on(t,"click.namespace",(()=>{r++})),EventHandler.on(t,"click.namespace2",(()=>{o++})),EventHandler.trigger(t,"click"),EventHandler.off(t,"click.namespace"),EventHandler.trigger(t,"click"),setTimeout((()=>{expect(r).toEqual(1),expect(o).toEqual(2),n()}),20)})))),it("should remove a listener registered by .one",(()=>new Promise(((n,t)=>{e.innerHTML="<div></div>";const r=e.querySelector("div"),o=()=>{t(new Error("called"))};EventHandler.one(r,"foobar",o),EventHandler.off(r,"foobar",o),EventHandler.trigger(r,"foobar"),setTimeout((()=>{expect().nothing(),n()}),20)})))),it("should remove the correct delegated event listener",(()=>{const n=document.createElement("div"),t=document.createElement("span");n.append(t);const r=document.createElement("a");n.append(r);let o=0;const i=()=>{o++};EventHandler.on(n,"click","a",i),EventHandler.on(n,"click","span",i),e.append(n),EventHandler.trigger(r,"click"),EventHandler.trigger(t,"click"),expect(o).toEqual(2),EventHandler.off(n,"click","span",i),EventHandler.trigger(t,"click"),expect(o).toEqual(2),EventHandler.trigger(r,"click"),expect(o).toEqual(3),EventHandler.on(n,"click","span",i),EventHandler.trigger(r,"click"),EventHandler.trigger(t,"click"),expect(o).toEqual(5),EventHandler.off(n,"click","span"),EventHandler.trigger(t,"click"),expect(o).toEqual(5)}))})),describe("general functionality",(()=>{it("should hydrate properties, and make them configurable",(()=>new Promise((n=>{e.innerHTML=['<div id="div1">','   <div id="div2"></div>','   <div id="div3"></div>',"</div>"].join("");const t=e.querySelector("#div1"),r=e.querySelector("#div2");EventHandler.on(t,"click",(e=>{expect(e.currentTarget).toBe(r),expect(e.delegateTarget).toBe(t),expect(e.originalTarget).toBeNull(),Object.defineProperty(e,"currentTarget",{configurable:!0,get:()=>t}),expect(e.currentTarget).toBe(t),n()})),expect((()=>{EventHandler.trigger(t,"click",{originalTarget:null,currentTarget:r})})).not.toThrowError(TypeError)}))))}))}));