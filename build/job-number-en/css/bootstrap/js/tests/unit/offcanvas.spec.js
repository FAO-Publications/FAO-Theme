import Offcanvas from"../../src/offcanvas";import EventHandler from"../../src/dom/event-handler";import{clearBodyAndDocument,clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";import{isVisible}from"../../src/util/index";import ScrollBarHelper from"../../src/util/scrollbar";describe("Offcanvas",(()=>{let e;beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture(),document.body.classList.remove("offcanvas-open"),clearBodyAndDocument()})),beforeEach((()=>{clearBodyAndDocument()})),describe("VERSION",(()=>{it("should return plugin version",(()=>{expect(Offcanvas.VERSION).toEqual(jasmine.any(String))}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(Offcanvas.Default).toEqual(jasmine.any(Object))}))})),describe("DATA_KEY",(()=>{it("should return plugin data key",(()=>{expect(Offcanvas.DATA_KEY).toEqual("bs.offcanvas")}))})),describe("constructor",(()=>{it('should call hide when a element with data-bs-dismiss="offcanvas" is clicked',(()=>{e.innerHTML=['<div class="offcanvas">','  <a href="#" data-bs-dismiss="offcanvas">Close</a>',"</div>"].join("");const n=e.querySelector(".offcanvas"),a=e.querySelector("a"),s=new Offcanvas(n),o=spyOn(s,"hide");a.click(),expect(s._config.keyboard).toBeTrue(),expect(o).toHaveBeenCalled()})),it("should hide if esc is pressed",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n),s=createEvent("keydown");s.key="Escape";const o=spyOn(a,"hide");n.dispatchEvent(s),expect(o).toHaveBeenCalled()})),it("should hide if esc is pressed and backdrop is static",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n,{backdrop:"static"}),s=createEvent("keydown");s.key="Escape";const o=spyOn(a,"hide");n.dispatchEvent(s),expect(o).toHaveBeenCalled()})),it("should not hide if esc is not pressed",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n),s=createEvent("keydown");s.key="Tab";const o=spyOn(a,"hide");n.dispatchEvent(s),expect(o).not.toHaveBeenCalled()})),it("should not hide if esc is pressed but with keyboard = false",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a,{keyboard:!1}),o=createEvent("keydown");o.key="Escape";const t=spyOn(s,"hide"),c=jasmine.createSpy("hidePrevented");a.addEventListener("hidePrevented.bs.offcanvas",c),a.addEventListener("shown.bs.offcanvas",(()=>{expect(s._config.keyboard).toBeFalse(),a.dispatchEvent(o),expect(c).toHaveBeenCalled(),expect(t).not.toHaveBeenCalled(),n()})),s.show()})))),it("should not hide if user clicks on static backdrop",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),s=new Offcanvas(a,{backdrop:"static"}),o=new Event("mousedown",{bubbles:!0,cancelable:!0}),t=spyOn(s._backdrop._config,"clickCallback").and.callThrough(),c=spyOn(s._backdrop,"hide").and.callThrough(),r=jasmine.createSpy("hidePrevented");a.addEventListener("hidePrevented.bs.offcanvas",r),a.addEventListener("shown.bs.offcanvas",(()=>{expect(t).toEqual(jasmine.any(Function)),s._backdrop._getElement().dispatchEvent(o),expect(r).toHaveBeenCalled(),expect(c).not.toHaveBeenCalled(),n()})),s.show()})))),it("should call `hide` on resize, if element's position is not fixed any more",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas-lg"></div>';const a=e.querySelector("div"),s=new Offcanvas(a),o=spyOn(s,"hide").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{const e=createEvent("resize");a.style.removeProperty("position"),window.dispatchEvent(e),expect(o).toHaveBeenCalled(),n()})),s.show()}))))})),describe("config",(()=>{it("should have default values",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n);expect(a._config.backdrop).toBeTrue(),expect(a._backdrop._config.isVisible).toBeTrue(),expect(a._config.keyboard).toBeTrue(),expect(a._config.scroll).toBeFalse()})),it("should read data attributes and override default config",(()=>{e.innerHTML='<div class="offcanvas" data-bs-scroll="true" data-bs-backdrop="false" data-bs-keyboard="false"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n);expect(a._config.backdrop).toBeFalse(),expect(a._backdrop._config.isVisible).toBeFalse(),expect(a._config.keyboard).toBeFalse(),expect(a._config.scroll).toBeTrue()})),it("given a config object must override data attributes",(()=>{e.innerHTML='<div class="offcanvas" data-bs-scroll="true" data-bs-backdrop="false" data-bs-keyboard="false"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n,{backdrop:!0,keyboard:!0,scroll:!1});expect(a._config.backdrop).toBeTrue(),expect(a._config.keyboard).toBeTrue(),expect(a._config.scroll).toBeFalse()}))})),describe("options",(()=>{it("if scroll is enabled, should allow body to scroll while offcanvas is open",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=spyOn(ScrollBarHelper.prototype,"hide").and.callThrough(),s=spyOn(ScrollBarHelper.prototype,"reset").and.callThrough(),o=e.querySelector(".offcanvas"),t=new Offcanvas(o,{scroll:!0});o.addEventListener("shown.bs.offcanvas",(()=>{expect(a).not.toHaveBeenCalled(),t.hide()})),o.addEventListener("hidden.bs.offcanvas",(()=>{expect(s).not.toHaveBeenCalled(),n()})),t.show()})))),it("if scroll is disabled, should call ScrollBarHelper to handle scrollBar on body",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=spyOn(ScrollBarHelper.prototype,"hide").and.callThrough(),s=spyOn(ScrollBarHelper.prototype,"reset").and.callThrough(),o=e.querySelector(".offcanvas"),t=new Offcanvas(o,{scroll:!1});o.addEventListener("shown.bs.offcanvas",(()=>{expect(a).toHaveBeenCalled(),t.hide()})),o.addEventListener("hidden.bs.offcanvas",(()=>{expect(s).toHaveBeenCalled(),n()})),t.show()})))),it("should hide a shown element if user click on backdrop",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),s=new Offcanvas(a,{backdrop:!0}),o=new Event("mousedown",{bubbles:!0,cancelable:!0}),t=spyOn(s._backdrop._config,"clickCallback").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{expect(s._backdrop._config.clickCallback).toEqual(jasmine.any(Function)),s._backdrop._getElement().dispatchEvent(o)})),a.addEventListener("hidden.bs.offcanvas",(()=>{expect(t).toHaveBeenCalled(),n()})),s.show()})))),it("should not trap focus if scroll is allowed",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a,{scroll:!0,backdrop:!1}),o=spyOn(s._focustrap,"activate").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{expect(o).not.toHaveBeenCalled(),n()})),s.show()})))),it("should trap focus if scroll is allowed OR backdrop is enabled",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a,{scroll:!0,backdrop:!0}),o=spyOn(s._focustrap,"activate").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{expect(o).toHaveBeenCalled(),n()})),s.show()}))))})),describe("toggle",(()=>{it("should call show method if show class is not present",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),a=new Offcanvas(n),s=spyOn(a,"show");a.toggle(),expect(s).toHaveBeenCalled()})),it("should call hide method if show class is present",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a);a.addEventListener("shown.bs.offcanvas",(()=>{expect(a).toHaveClass("show");const e=spyOn(s,"hide");s.toggle(),expect(e).toHaveBeenCalled(),n()})),s.show()}))))})),describe("show",(()=>{it("should add `showing` class during opening and `show` class on end",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a);a.addEventListener("show.bs.offcanvas",(()=>{expect(a).not.toHaveClass("show")})),a.addEventListener("shown.bs.offcanvas",(()=>{expect(a).not.toHaveClass("showing"),expect(a).toHaveClass("show"),n()})),s.show(),expect(a).toHaveClass("showing")})))),it("should do nothing if already shown",(()=>{e.innerHTML='<div class="offcanvas show"></div>';const n=e.querySelector("div"),a=new Offcanvas(n);a.show(),expect(n).toHaveClass("show");const s=spyOn(a._backdrop,"show").and.callThrough(),o=spyOn(EventHandler,"trigger").and.callThrough();a.show(),expect(o).not.toHaveBeenCalled(),expect(s).not.toHaveBeenCalled()})),it("should show a hidden element",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),s=new Offcanvas(a),o=spyOn(s._backdrop,"show").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{expect(a).toHaveClass("show"),expect(o).toHaveBeenCalled(),n()})),s.show()})))),it("should not fire shown when show is prevented",(()=>new Promise(((n,a)=>{e.innerHTML='<div class="offcanvas"></div>';const s=e.querySelector("div"),o=new Offcanvas(s),t=spyOn(o._backdrop,"show").and.callThrough();s.addEventListener("show.bs.offcanvas",(e=>{e.preventDefault(),setTimeout((()=>{expect(t).not.toHaveBeenCalled(),n()}),10)})),s.addEventListener("shown.bs.offcanvas",(()=>{a(new Error("should not fire shown event"))})),o.show()})))),it('on window load, should make visible an offcanvas element, if its markup contains class "show"',(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas show"></div>';const a=e.querySelector("div"),s=spyOn(Offcanvas.prototype,"show").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{n()})),window.dispatchEvent(createEvent("load"));const o=Offcanvas.getInstance(a);expect(o).not.toBeNull(),expect(s).toHaveBeenCalled()})))),it("should trap focus",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a),o=spyOn(s._focustrap,"activate").and.callThrough();a.addEventListener("shown.bs.offcanvas",(()=>{expect(o).toHaveBeenCalled(),n()})),s.show()}))))})),describe("hide",(()=>{it("should add `hiding` class during closing and remover `show` & `hiding` classes on end",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),s=new Offcanvas(a);a.addEventListener("hide.bs.offcanvas",(()=>{expect(a).not.toHaveClass("showing"),expect(a).toHaveClass("show")})),a.addEventListener("hidden.bs.offcanvas",(()=>{expect(a).not.toHaveClass("hiding"),expect(a).not.toHaveClass("show"),n()})),s.show(),a.addEventListener("shown.bs.offcanvas",(()=>{s.hide(),expect(a).not.toHaveClass("showing"),expect(a).toHaveClass("hiding")}))})))),it("should do nothing if already shown",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=spyOn(EventHandler,"trigger").and.callThrough(),a=e.querySelector("div"),s=new Offcanvas(a),o=spyOn(s._backdrop,"hide").and.callThrough();s.hide(),expect(o).not.toHaveBeenCalled(),expect(n).not.toHaveBeenCalled()})),it("should hide a shown element",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),s=new Offcanvas(a),o=spyOn(s._backdrop,"hide").and.callThrough();s.show(),a.addEventListener("hidden.bs.offcanvas",(()=>{expect(a).not.toHaveClass("show"),expect(o).toHaveBeenCalled(),n()})),s.hide()})))),it("should not fire hidden when hide is prevented",(()=>new Promise(((n,a)=>{e.innerHTML='<div class="offcanvas"></div>';const s=e.querySelector("div"),o=new Offcanvas(s),t=spyOn(o._backdrop,"hide").and.callThrough();o.show(),s.addEventListener("hide.bs.offcanvas",(e=>{e.preventDefault(),setTimeout((()=>{expect(t).not.toHaveBeenCalled(),n()}),10)})),s.addEventListener("hidden.bs.offcanvas",(()=>{a(new Error("should not fire hidden event"))})),o.hide()})))),it("should release focus trap",(()=>new Promise((n=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),s=new Offcanvas(a),o=spyOn(s._focustrap,"deactivate").and.callThrough();s.show(),a.addEventListener("hidden.bs.offcanvas",(()=>{expect(o).toHaveBeenCalled(),n()})),s.hide()}))))})),describe("dispose",(()=>{it("should dispose an offcanvas",(()=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),a=new Offcanvas(n),s=a._backdrop,o=spyOn(s,"dispose").and.callThrough(),t=a._focustrap,c=spyOn(t,"deactivate").and.callThrough();expect(Offcanvas.getInstance(n)).toEqual(a),a.dispose(),expect(o).toHaveBeenCalled(),expect(a._backdrop).toBeNull(),expect(c).toHaveBeenCalled(),expect(a._focustrap).toBeNull(),expect(Offcanvas.getInstance(n)).toBeNull()}))})),describe("data-api",(()=>{it("should not prevent event for input",(()=>new Promise((n=>{e.innerHTML=['<input type="checkbox" data-bs-toggle="offcanvas" data-bs-target="#offcanvasdiv1">','<div id="offcanvasdiv1" class="offcanvas"></div>'].join("");const a=e.querySelector("input"),s=e.querySelector("#offcanvasdiv1");s.addEventListener("shown.bs.offcanvas",(()=>{expect(s).toHaveClass("show"),expect(a.checked).toBeTrue(),n()})),a.click()})))),it("should not call toggle on disabled elements",(()=>{e.innerHTML=['<a href="#" data-bs-toggle="offcanvas" data-bs-target="#offcanvasdiv1" class="disabled"></a>','<div id="offcanvasdiv1" class="offcanvas"></div>'].join("");const n=e.querySelector("a"),a=spyOn(Offcanvas.prototype,"toggle");n.click(),expect(a).not.toHaveBeenCalled()})),it("should call hide first, if another offcanvas is open",(()=>new Promise((n=>{e.innerHTML=['<button id="btn2" data-bs-toggle="offcanvas" data-bs-target="#offcanvas2"></button>','<div id="offcanvas1" class="offcanvas"></div>','<div id="offcanvas2" class="offcanvas"></div>'].join("");const a=e.querySelector("#btn2"),s=document.querySelector("#offcanvas1"),o=document.querySelector("#offcanvas2"),t=new Offcanvas(s);s.addEventListener("shown.bs.offcanvas",(()=>{a.click()})),s.addEventListener("hidden.bs.offcanvas",(()=>{expect(Offcanvas.getInstance(o)).not.toBeNull(),n()})),t.show()})))),it("should focus on trigger element after closing offcanvas",(()=>new Promise((n=>{e.innerHTML=['<button id="btn" data-bs-toggle="offcanvas" data-bs-target="#offcanvas"></button>','<div id="offcanvas" class="offcanvas"></div>'].join("");const a=e.querySelector("#btn"),s=e.querySelector("#offcanvas"),o=new Offcanvas(s),t=spyOn(a,"focus");s.addEventListener("shown.bs.offcanvas",(()=>{o.hide()})),s.addEventListener("hidden.bs.offcanvas",(()=>{setTimeout((()=>{expect(t).toHaveBeenCalled(),n()}),5)})),a.click()})))),it("should not focus on trigger element after closing offcanvas, if it is not visible",(()=>new Promise((n=>{e.innerHTML=['<button id="btn" data-bs-toggle="offcanvas" data-bs-target="#offcanvas"></button>','<div id="offcanvas" class="offcanvas"></div>'].join("");const a=e.querySelector("#btn"),s=e.querySelector("#offcanvas"),o=new Offcanvas(s),t=spyOn(a,"focus");s.addEventListener("shown.bs.offcanvas",(()=>{a.style.display="none",o.hide()})),s.addEventListener("hidden.bs.offcanvas",(()=>{setTimeout((()=>{expect(isVisible(a)).toBeFalse(),expect(t).not.toHaveBeenCalled(),n()}),5)})),a.click()}))))})),describe("jQueryInterface",(()=>{it("should create an offcanvas",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],jQueryMock.fn.offcanvas.call(jQueryMock),expect(Offcanvas.getInstance(n)).not.toBeNull()})),it("should not re create an offcanvas",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a=new Offcanvas(n);jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],jQueryMock.fn.offcanvas.call(jQueryMock),expect(Offcanvas.getInstance(n)).toEqual(a)})),it("should throw error on undefined method",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a="undefinedMethod";jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],expect((()=>{jQueryMock.fn.offcanvas.call(jQueryMock,a)})).toThrowError(TypeError,`No method named "${a}"`)})),it("should throw error on protected method",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a="_getConfig";jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],expect((()=>{jQueryMock.fn.offcanvas.call(jQueryMock,a)})).toThrowError(TypeError,`No method named "${a}"`)})),it('should throw error if method "constructor" is being called',(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a="constructor";jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],expect((()=>{jQueryMock.fn.offcanvas.call(jQueryMock,a)})).toThrowError(TypeError,`No method named "${a}"`)})),it("should call offcanvas method",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a=spyOn(Offcanvas.prototype,"show");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],jQueryMock.fn.offcanvas.call(jQueryMock,"show"),expect(a).toHaveBeenCalled()})),it("should create a offcanvas with given config",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[n],jQueryMock.fn.offcanvas.call(jQueryMock,{scroll:!0});const a=Offcanvas.getInstance(n);expect(a).not.toBeNull(),expect(a._config.scroll).toBeTrue()}))})),describe("getInstance",(()=>{it("should return offcanvas instance",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a=new Offcanvas(n);expect(Offcanvas.getInstance(n)).toEqual(a),expect(Offcanvas.getInstance(n)).toBeInstanceOf(Offcanvas)})),it("should return null when there is no offcanvas instance",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");expect(Offcanvas.getInstance(n)).toBeNull()}))})),describe("getOrCreateInstance",(()=>{it("should return offcanvas instance",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a=new Offcanvas(n);expect(Offcanvas.getOrCreateInstance(n)).toEqual(a),expect(Offcanvas.getInstance(n)).toEqual(Offcanvas.getOrCreateInstance(n,{})),expect(Offcanvas.getOrCreateInstance(n)).toBeInstanceOf(Offcanvas)})),it("should return new instance when there is no Offcanvas instance",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");expect(Offcanvas.getInstance(n)).toBeNull(),expect(Offcanvas.getOrCreateInstance(n)).toBeInstanceOf(Offcanvas)})),it("should return new instance when there is no offcanvas instance with given configuration",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div");expect(Offcanvas.getInstance(n)).toBeNull();const a=Offcanvas.getOrCreateInstance(n,{scroll:!0});expect(a).toBeInstanceOf(Offcanvas),expect(a._config.scroll).toBeTrue()})),it("should return the instance when exists without given configuration",(()=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),a=new Offcanvas(n,{scroll:!0});expect(Offcanvas.getInstance(n)).toEqual(a);const s=Offcanvas.getOrCreateInstance(n,{scroll:!1});expect(a).toBeInstanceOf(Offcanvas),expect(s).toEqual(a),expect(s._config.scroll).toBeTrue()}))}))}));