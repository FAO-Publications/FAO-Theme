import ScrollSpy from"../../src/scrollspy";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";import EventHandler from"../../src/dom/event-handler";describe("ScrollSpy",(()=>{let e;const t=e=>e.scrollTo?spyOn(e,"scrollTo").and.callThrough():spyOnProperty(e,"scrollTop","set").and.callThrough(),l=(e,t)=>{e.scrollTop=t},n=(e,t,l=30)=>{let n=null;const o=function(){n&&window.clearTimeout(n),n=setTimeout((()=>{t.removeEventListener("scroll",o),e()}),l+1)};t.addEventListener("scroll",o)},o=()=>['<nav id="navBar" class="navbar">','  <ul class="nav">','    <li class="nav-item"><a id="li-jsm-1" class="nav-link" href="#div-jsm-1">div 1</a></li>',"  </ul>","</nav>",'<div class="content" data-bs-target="#navBar" style="overflow-y: auto">','  <div id="div-jsm-1">div 1</div>',"</div>"].join(""),i=({elementSelector:t,targetSelector:n,contentEl:o,scrollSpy:i,cb:r})=>{const a=e.querySelector(t),c=e.querySelector(n),s="relative"===getComputedStyle(o).getPropertyValue("position")?0:o.offsetTop,d=c.offsetTop-s+0;o.addEventListener("activate.bs.scrollspy",(e=>{i._activeTarget===a&&(expect(a).toHaveClass("active"),expect(i._activeTarget).toEqual(a),expect(e.relatedTarget).toEqual(a),r())})),setTimeout((()=>{l(o,d)}),100)};beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture()})),describe("VERSION",(()=>{it("should return plugin version",(()=>{expect(ScrollSpy.VERSION).toEqual(jasmine.any(String))}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(ScrollSpy.Default).toEqual(jasmine.any(Object))}))})),describe("DATA_KEY",(()=>{it("should return plugin data key",(()=>{expect(ScrollSpy.DATA_KEY).toEqual("bs.scrollspy")}))})),describe("constructor",(()=>{it("should take care of element either passed as a CSS selector or DOM element",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(".content"),n=new ScrollSpy(t);expect(l._element).toEqual(t),expect(n._element).toEqual(t)})),it("should null, if element is not scrollable",(()=>{e.innerHTML=['<nav id="navigation" class="navbar">','  <ul class="navbar-nav">     <li class="nav-item"><a class="nav-link active" id="one-link" href="#">One</a></li>  </ul>',"</nav>",'<div id="content">','  <div id="1" style="height: 300px;">test</div>',"</div>"].join("");const t=new ScrollSpy(e.querySelector("#content"),{target:"#navigation"});expect(t._observer.root).toBeNull(),expect(t._rootElement).toBeNull()})),it("should respect threshold option",(()=>{e.innerHTML=['<ul id="navigation" class="navbar">','   <a class="nav-link active" id="one-link" href="#">One</a></ul>','<div id="content">','  <div id="one-link">test</div>',"</div>"].join("");const t=new ScrollSpy("#content",{target:"#navigation",threshold:[1]});expect(t._observer.thresholds).toEqual([1])})),it("should respect threshold option markup",(()=>{e.innerHTML=['<ul id="navigation" class="navbar">','   <a class="nav-link active" id="one-link" href="#">One</a></ul>','<div id="content" data-bs-threshold="0,0.2,1">','  <div id="one-link">test</div>',"</div>"].join(""),((e,t)=>{expect(e.length).toBe(t.length);for(const l of e){const n=e.indexOf(l);expect(l).withContext(`[${n}]`).toBeCloseTo(t[n])}})(new ScrollSpy("#content",{target:"#navigation"})._observer.thresholds,[0,.2,1])})),it("should not take count to not visible sections",(()=>{e.innerHTML=['<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a class="nav-link active" id="one-link" href="#one">One</a></li>','    <li class="nav-item"><a class="nav-link" id="two-link" href="#two">Two</a></li>','    <li class="nav-item"><a class="nav-link" id="three-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">','  <div id="one" style="height: 300px;">test</div>','  <div id="two" hidden style="height: 300px;">test</div>','  <div id="three"  style="display: none;">test</div>',"</div>"].join("");const t=new ScrollSpy(e.querySelector("#content"),{target:"#navigation"});expect(t._observableSections.size).toBe(1),expect(t._targetLinks.size).toBe(1)})),it("should not process element without target",(()=>{e.innerHTML=['<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a class="nav-link active" id="one-link" href="#">One</a></li>','    <li class="nav-item"><a class="nav-link" id="two-link" href="#two">Two</a></li>','    <li class="nav-item"><a class="nav-link" id="three-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">','  <div id="two" style="height: 300px;">test</div>','  <div id="three" style="height: 10px;">test2</div>',"</div>"].join("");const t=new ScrollSpy(e.querySelector("#content"),{target:"#navigation"});expect(t._targetLinks).toHaveSize(2)})),it('should only switch "active" class on current target',(()=>new Promise((t=>{e.innerHTML=['<div id="root" class="active" style="display: block">','  <div class="topbar">','    <div class="topbar-inner">','      <div class="container" id="ss-target">','        <ul class="nav">','          <li class="nav-item"><a href="#masthead">Overview</a></li>','          <li class="nav-item"><a href="#detail">Detail</a></li>',"        </ul>","      </div>","    </div>","  </div>",'  <div id="scrollspy-example" style="height: 100px; overflow: auto;">','     <div style="height: 200px;" id="masthead">Overview</div>','     <div style="height: 200px;" id="detail">Detail</div>',"  </div>","</div>"].join("");const o=e.querySelector("#scrollspy-example"),i=e.querySelector("#root"),r=new ScrollSpy(o,{target:"ss-target"}),a=spyOn(r,"_process").and.callThrough();n((()=>{expect(i).toHaveClass("active"),expect(a).toHaveBeenCalled(),t()}),o),l(o,350)})))),it("should not process data if `activeTarget` is same as given target",(()=>new Promise(((t,l)=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a class="nav-link" id="a-1" href="#div-1">div 1</a></li>','    <li class="nav-item"><a class="nav-link" id="a-2" href="#div-2">div 2</a></li>',"  </ul>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const n=e.querySelector(".content"),o=new ScrollSpy(n,{offset:0,target:".navbar"}),r=spyOn(EventHandler,"trigger").and.callThrough();o._activeTarget=e.querySelector("#a-1"),i({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:n,scrollSpy:o,cb:l}),setTimeout((()=>{expect(r).not.toHaveBeenCalled(),t()}),100)})))),it('should only switch "active" class on current target specified w element',(()=>new Promise((t=>{e.innerHTML=['<div id="root" class="active" style="display: block">','  <div class="topbar">','    <div class="topbar-inner">','      <div class="container" id="ss-target">','        <ul class="nav">','          <li class="nav-item"><a href="#masthead">Overview</a></li>','          <li class="nav-item"><a href="#detail">Detail</a></li>',"        </ul>","      </div>","    </div>","  </div>",'  <div id="scrollspy-example" style="height: 100px; overflow: auto;">','    <div style="height: 200px;" id="masthead">Overview</div>','    <div style="height: 200px;" id="detail">Detail</div>',"  </div>","</div>"].join("");const o=e.querySelector("#scrollspy-example"),i=e.querySelector("#root"),r=new ScrollSpy(o,{target:e.querySelector("#ss-target")}),a=spyOn(r,"_process").and.callThrough();n((()=>{expect(i).toHaveClass("active"),expect(r._activeTarget).toEqual(e.querySelector('[href="#detail"]')),expect(a).toHaveBeenCalled(),t()}),o),l(o,350)})))),it("should add the active class to the correct element",(()=>new Promise((t=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a class="nav-link" id="a-1" href="#div-1">div 1</a></li>','    <li class="nav-item"><a class="nav-link" id="a-2" href="#div-2">div 2</a></li>',"  </ul>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"});i({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,cb(){i({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,cb:t})}})})))),it("should add to nav the active class to the correct element (nav markup)",(()=>new Promise((t=>{e.innerHTML=['<nav class="navbar">','  <nav class="nav">','    <a class="nav-link" id="a-1" href="#div-1">div 1</a>','    <a class="nav-link" id="a-2" href="#div-2">div 2</a>',"  </nav>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"});i({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,cb(){i({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,cb:t})}})})))),it("should add to list-group, the active class to the correct element (list-group markup)",(()=>new Promise((t=>{e.innerHTML=['<nav class="navbar">','  <div class="list-group">','    <a class="list-group-item" id="a-1" href="#div-1">div 1</a>','    <a class="list-group-item" id="a-2" href="#div-2">div 2</a>',"  </div>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"});i({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,cb(){i({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,cb:t})}})})))),it("should clear selection if above the first section",(()=>new Promise((t=>{e.innerHTML=['<div id="header" style="height: 500px;"></div>','<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a id="one-link"   class="nav-link active" href="#one">One</a></li>','    <li class="nav-item"><a id="two-link"   class="nav-link" href="#two">Two</a></li>','    <li class="nav-item"><a id="three-link" class="nav-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">','  <div id="spacer" style="height: 200px;"></div>','  <div id="one" style="height: 100px;">text</div>','  <div id="two" style="height: 100px;">text</div>','  <div id="three" style="height: 100px;">text</div>','  <div id="spacer" style="height: 100px;"></div>',"</div>"].join("");const o=e.querySelector("#content"),i=new ScrollSpy(o,{target:"#navigation",offset:o.offsetTop}),r=spyOn(i,"_process").and.callThrough();n((()=>{const i=()=>e.querySelector(".active");expect(r).toHaveBeenCalled(),expect(e.querySelectorAll(".active")).toHaveSize(1),expect(i().getAttribute("id")).toEqual("two-link"),n((()=>{expect(i()).toBeNull(),t()}),o),l(o,0)}),o),l(o,200)})))),it("should not clear selection if above the first section and first section is at the top",(()=>new Promise((t=>{e.innerHTML=['<div id="header" style="height: 500px;"></div>','<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a id="one-link" class="nav-link active" href="#one">One</a></li>','    <li class="nav-item"><a id="two-link" class="nav-link" href="#two">Two</a></li>','    <li class="nav-item"><a id="three-link" class="nav-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 150px; overflow-y: auto;">','  <div id="one" style="height: 100px;">test</div>','  <div id="two" style="height: 100px;">test</div>','  <div id="three" style="height: 100px;">test</div>','  <div id="spacer" style="height: 100px;">test</div>',"</div>"].join("");const o=e.querySelector("#content");new ScrollSpy(o,{target:"#navigation",rootMargin:"0px 0px -50%"}),n((()=>{const i=()=>e.querySelector(".active").getAttribute("id");expect(e.querySelectorAll(".active")).toHaveSize(1),expect(i()).toEqual("two-link"),l(o,0),n((()=>{expect(e.querySelectorAll(".active")).toHaveSize(1),expect(i()).toEqual("one-link"),t()}),o),l(o,0)}),o),l(o,101)})))),it("should correctly select navigation element on backward scrolling when each target section height is 100%",(()=>new Promise((t=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a id="li-100-1" class="nav-link" href="#div-100-1">div 1</a></li>','    <li class="nav-item"><a id="li-100-2" class="nav-link" href="#div-100-2">div 2</a></li>','    <li class="nav-item"><a id="li-100-3" class="nav-link" href="#div-100-3">div 3</a></li>','    <li class="nav-item"><a id="li-100-4" class="nav-link" href="#div-100-4">div 4</a></li>','    <li class="nav-item"><a id="li-100-5" class="nav-link" href="#div-100-5">div 5</a></li>',"  </ul>","</nav>",'<div class="content" style="position: relative; overflow: auto; height: 100px">','  <div id="div-100-1" style="position: relative; height: 100%; padding: 0; margin: 0">div 1</div>','  <div id="div-100-2" style="position: relative; height: 100%; padding: 0; margin: 0">div 2</div>','  <div id="div-100-3" style="position: relative; height: 100%; padding: 0; margin: 0">div 3</div>','  <div id="div-100-4" style="position: relative; height: 100%; padding: 0; margin: 0">div 4</div>','  <div id="div-100-5" style="position: relative; height: 100%; padding: 0; margin: 0">div 5</div>',"</div>"].join("");const n=e.querySelector(".content"),o=new ScrollSpy(n,{offset:0,target:".navbar"});l(n,0),i({elementSelector:"#li-100-5",targetSelector:"#div-100-5",contentEl:n,scrollSpy:o,cb(){l(n,0),i({elementSelector:"#li-100-2",targetSelector:"#div-100-2",contentEl:n,scrollSpy:o,cb(){l(n,0),i({elementSelector:"#li-100-3",targetSelector:"#div-100-3",contentEl:n,scrollSpy:o,cb(){l(n,0),i({elementSelector:"#li-100-2",targetSelector:"#div-100-2",contentEl:n,scrollSpy:o,cb(){l(n,0),i({elementSelector:"#li-100-1",targetSelector:"#div-100-1",contentEl:n,scrollSpy:o,cb:t})}})}})}})}})}))))})),describe("refresh",(()=>{it("should disconnect existing observer",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t),n=spyOn(l._observer,"disconnect");l.refresh(),expect(n).toHaveBeenCalled()}))})),describe("dispose",(()=>{it("should dispose a scrollspy",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t);expect(ScrollSpy.getInstance(t)).not.toBeNull(),l.dispose(),expect(ScrollSpy.getInstance(t)).toBeNull()}))})),describe("jQueryInterface",(()=>{it("should create a scrollspy",(()=>{e.innerHTML=o();const t=e.querySelector(".content");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock,{target:"#navBar"}),expect(ScrollSpy.getInstance(t)).not.toBeNull()})),it("should create a scrollspy with given config",(()=>{e.innerHTML=o();const t=e.querySelector(".content");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock,{rootMargin:"100px"});const l=spyOn(ScrollSpy.prototype,"constructor");expect(l).not.toHaveBeenCalledWith(t,{rootMargin:"100px"});const n=ScrollSpy.getInstance(t);expect(n).not.toBeNull(),expect(n._config.rootMargin).toEqual("100px")})),it("should not re create a scrollspy",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t);jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock),expect(ScrollSpy.getInstance(t)).toEqual(l)})),it("should call a scrollspy method",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t),n=spyOn(l,"refresh");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock,"refresh"),expect(ScrollSpy.getInstance(t)).toEqual(l),expect(n).toHaveBeenCalled()})),it("should throw error on undefined method",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l="undefinedMethod";jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],expect((()=>{jQueryMock.fn.scrollspy.call(jQueryMock,l)})).toThrowError(TypeError,`No method named "${l}"`)})),it("should throw error on protected method",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l="_getConfig";jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],expect((()=>{jQueryMock.fn.scrollspy.call(jQueryMock,l)})).toThrowError(TypeError,`No method named "${l}"`)})),it('should throw error if method "constructor" is being called',(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l="constructor";jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],expect((()=>{jQueryMock.fn.scrollspy.call(jQueryMock,l)})).toThrowError(TypeError,`No method named "${l}"`)}))})),describe("getInstance",(()=>{it("should return scrollspy instance",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t,{target:e.querySelector("#navBar")});expect(ScrollSpy.getInstance(t)).toEqual(l),expect(ScrollSpy.getInstance(t)).toBeInstanceOf(ScrollSpy)})),it("should return null if there is no instance",(()=>{e.innerHTML=o();const t=e.querySelector(".content");expect(ScrollSpy.getInstance(t)).toBeNull()}))})),describe("getOrCreateInstance",(()=>{it("should return scrollspy instance",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t);expect(ScrollSpy.getOrCreateInstance(t)).toEqual(l),expect(ScrollSpy.getInstance(t)).toEqual(ScrollSpy.getOrCreateInstance(t,{})),expect(ScrollSpy.getOrCreateInstance(t)).toBeInstanceOf(ScrollSpy)})),it("should return new instance when there is no scrollspy instance",(()=>{e.innerHTML=o();const t=e.querySelector(".content");expect(ScrollSpy.getInstance(t)).toBeNull(),expect(ScrollSpy.getOrCreateInstance(t)).toBeInstanceOf(ScrollSpy)})),it("should return new instance when there is no scrollspy instance with given configuration",(()=>{e.innerHTML=o();const t=e.querySelector(".content");expect(ScrollSpy.getInstance(t)).toBeNull();const l=ScrollSpy.getOrCreateInstance(t,{offset:1});expect(l).toBeInstanceOf(ScrollSpy),expect(l._config.offset).toEqual(1)})),it("should return the instance when exists without given configuration",(()=>{e.innerHTML=o();const t=e.querySelector(".content"),l=new ScrollSpy(t,{offset:1});expect(ScrollSpy.getInstance(t)).toEqual(l);const n=ScrollSpy.getOrCreateInstance(t,{offset:2});expect(l).toBeInstanceOf(ScrollSpy),expect(n).toEqual(l),expect(n._config.offset).toEqual(1)}))})),describe("event handler",(()=>{it("should create scrollspy on window load event",(()=>{e.innerHTML=['<div id="nav"></div><div id="wrapper" data-bs-spy="scroll" data-bs-target="#nav" style="overflow-y: auto"></div>'].join("");const t=e.querySelector("#wrapper");window.dispatchEvent(createEvent("load")),expect(ScrollSpy.getInstance(t)).not.toBeNull()}))})),describe("SmoothScroll",(()=>{it("should not enable smoothScroll",(()=>{e.innerHTML=o();const t=spyOn(EventHandler,"off").and.callThrough(),l=spyOn(EventHandler,"on").and.callThrough(),n=e.querySelector(".content"),i=e.querySelector("#navBar");new ScrollSpy(n,{offset:1}),expect(t).not.toHaveBeenCalledWith(i,"click.bs.scrollspy"),expect(l).not.toHaveBeenCalledWith(i,"click.bs.scrollspy")})),it("should enable smoothScroll",(()=>{e.innerHTML=o();const t=spyOn(EventHandler,"off").and.callThrough(),l=spyOn(EventHandler,"on").and.callThrough(),n=e.querySelector(".content"),i=e.querySelector("#navBar");new ScrollSpy(n,{offset:1,smoothScroll:!0}),expect(t).toHaveBeenCalledWith(i,"click.bs.scrollspy"),expect(l).toHaveBeenCalledWith(i,"click.bs.scrollspy","[href]",jasmine.any(Function))})),it("should not smoothScroll to element if it not handles a scrollspy section",(()=>{e.innerHTML=['<nav id="navBar" class="navbar">','  <ul class="nav">','    <a id="anchor-1" href="#div-jsm-1">div 1</a></li>','    <a id="anchor-2" href="#foo">div 2</a></li>',"  </ul>","</nav>",'<div class="content" data-bs-target="#navBar" style="overflow-y: auto">','  <div id="div-jsm-1">div 1</div>',"</div>"].join("");const l=e.querySelector(".content");new ScrollSpy(l,{offset:1,smoothScroll:!0});const n=t(l);e.querySelector("#anchor-2").click(),expect(n).not.toHaveBeenCalled()})),it("should call `scrollTop` if element doesn't not support `scrollTo`",(()=>{e.innerHTML=o();const l=e.querySelector(".content"),n=e.querySelector('[href="#div-jsm-1"]');delete l.scrollTo;const i=t(l);new ScrollSpy(l,{offset:1,smoothScroll:!0}),n.click(),expect(i).toHaveBeenCalled()})),it("should smoothScroll to the proper observable element on anchor click",(l=>{e.innerHTML=o();const n=e.querySelector(".content"),i=e.querySelector('[href="#div-jsm-1"]'),r=e.querySelector("#div-jsm-1"),a=t(n);new ScrollSpy(n,{offset:1,smoothScroll:!0}),setTimeout((()=>{n.scrollTo?expect(a).toHaveBeenCalledWith({top:r.offsetTop-n.offsetTop,behavior:"smooth"}):expect(a).toHaveBeenCalledWith(r.offsetTop-n.offsetTop),l()}),100),i.click()}))}))}));