import{clearFixture,getFixture}from"../../helpers/fixture";import TemplateFactory from"../../../src/util/template-factory";describe("TemplateFactory",(()=>{let t;beforeAll((()=>{t=getFixture()})),afterEach((()=>{clearFixture()})),describe("NAME",(()=>{it("should return plugin NAME",(()=>{expect(TemplateFactory.NAME).toEqual("TemplateFactory")}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(TemplateFactory.Default).toEqual(jasmine.any(Object))}))})),describe("toHtml",(()=>{describe("Sanitization",(()=>{it('should use "sanitizeHtml" to sanitize template',(()=>{const t=new TemplateFactory({sanitize:!0,template:'<div><a href="javascript:alert(7)">Click me</a></div>'}),e=spyOn(t,"_maybeSanitize").and.callThrough();expect(t.toHtml().innerHTML).not.toContain('href="javascript:alert(7)'),expect(e).toHaveBeenCalled()})),it("should not sanitize template",(()=>{const t=new TemplateFactory({sanitize:!1,template:'<div><a href="javascript:alert(7)">Click me</a></div>'}),e=spyOn(t,"_maybeSanitize").and.callThrough();expect(t.toHtml().innerHTML).toContain('href="javascript:alert(7)'),expect(e).toHaveBeenCalled()})),it('should use "sanitizeHtml" to sanitize content',(()=>{const t=new TemplateFactory({sanitize:!0,html:!0,template:'<div id="foo"></div>',content:{"#foo":'<a href="javascript:alert(7)">Click me</a>'}});expect(t.toHtml().innerHTML).not.toContain('href="javascript:alert(7)')})),it("should not sanitize content",(()=>{const t=new TemplateFactory({sanitize:!1,html:!0,template:'<div id="foo"></div>',content:{"#foo":'<a href="javascript:alert(7)">Click me</a>'}});expect(t.toHtml().innerHTML).toContain('href="javascript:alert(7)')})),it('should sanitize content only if "config.html" is enabled',(()=>{const t=new TemplateFactory({sanitize:!0,html:!1,template:'<div id="foo"></div>',content:{"#foo":'<a href="javascript:alert(7)">Click me</a>'}}),e=spyOn(t,"_maybeSanitize").and.callThrough();expect(e).not.toHaveBeenCalled()}))})),describe("Extra Class",(()=>{it("should add extra class",(()=>{const t=new TemplateFactory({extraClass:"testClass"});expect(t.toHtml()).toHaveClass("testClass")})),it("should add extra classes",(()=>{const t=new TemplateFactory({extraClass:"testClass testClass2"});expect(t.toHtml()).toHaveClass("testClass"),expect(t.toHtml()).toHaveClass("testClass2")})),it("should resolve class if function is given",(()=>{const t=new TemplateFactory({extraClass:e=>(expect(e).toEqual(t),"testClass")});expect(t.toHtml()).toHaveClass("testClass")}))}))})),describe("Content",(()=>{it("add simple text content",(()=>{const t=["<div>",'  <div class="foo"></div>','  <div class="foo2"></div>',"</div>"].join(""),e=new TemplateFactory({template:t,content:{".foo":"bar",".foo2":"bar2"}}).toHtml();expect(e.querySelector(".foo").textContent).toEqual("bar"),expect(e.querySelector(".foo2").textContent).toEqual("bar2")})),it("should not fill template if selector not exists",(()=>{const t=new TemplateFactory({sanitize:!0,html:!0,template:'<div id="foo"></div>',content:{"#bar":"test"}});expect(t.toHtml().outerHTML).toEqual('<div id="foo"></div>')})),it("should remove template selector, if content is null",(()=>{const t=new TemplateFactory({sanitize:!0,html:!0,template:'<div><div id="foo"></div></div>',content:{"#foo":null}});expect(t.toHtml().outerHTML).toEqual("<div></div>")})),it("should resolve content if is function",(()=>{const t=new TemplateFactory({sanitize:!0,html:!0,template:'<div><div id="foo"></div></div>',content:{"#foo":()=>null}});expect(t.toHtml().outerHTML).toEqual("<div></div>")})),it('if content is element and "config.html=false", should put content\'s textContent',(()=>{t.innerHTML="<div>foo<span>bar</span></div>";const e=t.querySelector("div"),o=new TemplateFactory({html:!1,template:'<div><div id="foo"></div></div>',content:{"#foo":e}}).toHtml().querySelector("#foo");expect(o.innerHTML).not.toEqual(e.innerHTML),expect(o.textContent).toEqual(e.textContent),expect(o.textContent).toEqual("foobar")})),it('if content is element and "config.html=true", should put content\'s outerHtml as child',(()=>{t.innerHTML="<div>foo<span>bar</span></div>";const e=t.querySelector("div"),o=new TemplateFactory({html:!0,template:'<div><div id="foo"></div></div>',content:{"#foo":e}}).toHtml().querySelector("#foo");expect(o.innerHTML).toEqual(e.outerHTML),expect(o.textContent).toEqual(e.textContent)}))})),describe("getContent",(()=>{it("should get content as array",(()=>{const t=new TemplateFactory({content:{".foo":"bar",".foo2":"bar2"}});expect(t.getContent()).toEqual(["bar","bar2"])})),it("should filter empties",(()=>{const t=new TemplateFactory({content:{".foo":"bar",".foo2":"",".foo3":null,".foo4":()=>2,".foo5":()=>null}});expect(t.getContent()).toEqual(["bar",2])}))})),describe("hasContent",(()=>{it("should return true, if it has",(()=>{const t=new TemplateFactory({content:{".foo":"bar",".foo2":"bar2",".foo3":""}});expect(t.hasContent()).toBeTrue()})),it("should return false, if filtered content is empty",(()=>{const t=new TemplateFactory({content:{".foo2":"",".foo3":null,".foo4":()=>null}});expect(t.hasContent()).toBeFalse()}))})),describe("changeContent",(()=>{it("should change Content",(()=>{const t=["<div>",'  <div class="foo"></div>','  <div class="foo2"></div>',"</div>"].join(""),e=new TemplateFactory({template:t,content:{".foo":"bar",".foo2":"bar2"}}),o=t=>e.toHtml().querySelector(t).textContent;expect(o(".foo")).toEqual("bar"),expect(o(".foo2")).toEqual("bar2"),e.changeContent({".foo":"test",".foo2":"test2"}),expect(o(".foo")).toEqual("test"),expect(o(".foo2")).toEqual("test2")})),it("should change only the given, content",(()=>{const t=["<div>",'  <div class="foo"></div>','  <div class="foo2"></div>',"</div>"].join(""),e=new TemplateFactory({template:t,content:{".foo":"bar",".foo2":"bar2"}}),o=t=>e.toHtml().querySelector(t).textContent;expect(o(".foo")).toEqual("bar"),expect(o(".foo2")).toEqual("bar2"),e.changeContent({".foo":"test",".wrong":"wrong"}),expect(o(".foo")).toEqual("test"),expect(o(".foo2")).toEqual("bar2")}))}))}));