import Modal from"../../src/modal";import EventHandler from"../../src/dom/event-handler";import ScrollBarHelper from"../../src/util/scrollbar";import{clearBodyAndDocument,clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";describe("Modal",(()=>{let e;beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture(),clearBodyAndDocument(),document.body.classList.remove("modal-open");for(const e of document.querySelectorAll(".modal-backdrop"))e.remove()})),beforeEach((()=>{clearBodyAndDocument()})),describe("VERSION",(()=>{it("should return plugin version",(()=>{expect(Modal.VERSION).toEqual(jasmine.any(String))}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(Modal.Default).toEqual(jasmine.any(Object))}))})),describe("DATA_KEY",(()=>{it("should return plugin data key",(()=>{expect(Modal.DATA_KEY).toEqual("bs.modal")}))})),describe("constructor",(()=>{it("should take care of element either passed as a CSS selector or DOM element",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(".modal"),t=new Modal(o);expect(d._element).toEqual(o),expect(t._element).toEqual(o)}))})),describe("toggle",(()=>{it("should call ScrollBarHelper to handle scrollBar on body",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=spyOn(ScrollBarHelper.prototype,"hide").and.callThrough(),t=spyOn(ScrollBarHelper.prototype,"reset").and.callThrough(),a=e.querySelector(".modal"),l=new Modal(a);a.addEventListener("shown.bs.modal",(()=>{expect(d).toHaveBeenCalled(),l.toggle()})),a.addEventListener("hidden.bs.modal",(()=>{expect(t).toHaveBeenCalled(),o()})),l.toggle()}))))})),describe("show",(()=>{it("should show a modal",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d);d.addEventListener("show.bs.modal",(e=>{expect(e).toBeDefined()})),d.addEventListener("shown.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toEqual("true"),expect(d.getAttribute("role")).toEqual("dialog"),expect(d.getAttribute("aria-hidden")).toBeNull(),expect(d.style.display).toEqual("block"),expect(document.querySelector(".modal-backdrop")).not.toBeNull(),o()})),t.show()})))),it("should show a modal without backdrop",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d,{backdrop:!1});d.addEventListener("show.bs.modal",(e=>{expect(e).toBeDefined()})),d.addEventListener("shown.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toEqual("true"),expect(d.getAttribute("role")).toEqual("dialog"),expect(d.getAttribute("aria-hidden")).toBeNull(),expect(d.style.display).toEqual("block"),expect(document.querySelector(".modal-backdrop")).toBeNull(),o()})),t.show()})))),it("should show a modal and append the element",(()=>new Promise((e=>{const o=document.createElement("div"),d="dynamicModal";o.setAttribute("id",d),o.classList.add("modal"),o.innerHTML='<div class="modal-dialog"></div>';const t=new Modal(o);o.addEventListener("shown.bs.modal",(()=>{const o=document.getElementById(d);expect(o).not.toBeNull(),o.remove(),e()})),t.show()})))),it("should do nothing if a modal is shown",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(o),t=spyOn(EventHandler,"trigger");d._isShown=!0,d.show(),expect(t).not.toHaveBeenCalled()})),it("should do nothing if a modal is transitioning",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(o),t=spyOn(EventHandler,"trigger");d._isTransitioning=!0,d.show(),expect(t).not.toHaveBeenCalled()})),it("should not fire shown event when show is prevented",(()=>new Promise(((o,d)=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const t=e.querySelector(".modal"),a=new Modal(t);t.addEventListener("show.bs.modal",(e=>{e.preventDefault(),setTimeout((()=>{expect().nothing(),o()}),10)})),t.addEventListener("shown.bs.modal",(()=>{d(new Error("shown event triggered"))})),a.show()})))),it("should be shown after the first call to show() has been prevented while fading is enabled ",(()=>new Promise((o=>{e.innerHTML='<div class="modal fade"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d);let a=!1;d.addEventListener("show.bs.modal",(e=>{a||(e.preventDefault(),a=!0,setTimeout((()=>{t.show()})))})),d.addEventListener("shown.bs.modal",(()=>{expect(a).toBeTrue(),expect(t._isAnimated()).toBeTrue(),o()})),t.show()})))),it("should set is transitioning if fade class is present",(()=>new Promise((o=>{e.innerHTML='<div class="modal fade"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d);d.addEventListener("show.bs.modal",(()=>{setTimeout((()=>{expect(t._isTransitioning).toBeTrue()}))})),d.addEventListener("shown.bs.modal",(()=>{expect(t._isTransitioning).toBeFalse(),o()})),t.show()})))),it('should close modal when a click occurred on data-bs-dismiss="modal" inside modal',(()=>new Promise((o=>{e.innerHTML=['<div class="modal fade">','  <div class="modal-dialog">','    <div class="modal-header">','      <button type="button" data-bs-dismiss="modal"></button>',"    </div>","  </div>","</div>"].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-dismiss="modal"]'),a=new Modal(d),l=spyOn(a,"hide").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.click()})),d.addEventListener("hidden.bs.modal",(()=>{expect(l).toHaveBeenCalled(),o()})),a.show()})))),it('should close modal when a click occurred on a data-bs-dismiss="modal" with "bs-target" outside of modal element',(()=>new Promise((o=>{e.innerHTML=['<button type="button" data-bs-dismiss="modal" data-bs-target="#modal1"></button>','<div id="modal1" class="modal fade">','  <div class="modal-dialog"></div>',"</div>"].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-dismiss="modal"]'),a=new Modal(d),l=spyOn(a,"hide").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.click()})),d.addEventListener("hidden.bs.modal",(()=>{expect(l).toHaveBeenCalled(),o()})),a.show()})))),it("should set .modal's scroll top to 0",(()=>new Promise((o=>{e.innerHTML=['<div class="modal fade">','  <div class="modal-dialog"></div>',"</div>"].join("");const d=e.querySelector(".modal"),t=new Modal(d);d.addEventListener("shown.bs.modal",(()=>{expect(d.scrollTop).toEqual(0),o()})),t.show()})))),it("should set modal body scroll top to 0 if modal body do not exists",(()=>new Promise((o=>{e.innerHTML=['<div class="modal fade">','  <div class="modal-dialog">','    <div class="modal-body"></div>',"  </div>","</div>"].join("");const d=e.querySelector(".modal"),t=d.querySelector(".modal-body"),a=new Modal(d);d.addEventListener("shown.bs.modal",(()=>{expect(t.scrollTop).toEqual(0),o()})),a.show()})))),it("should not trap focus if focus equal to false",(()=>new Promise((o=>{e.innerHTML='<div class="modal fade"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d,{focus:!1}),a=spyOn(t._focustrap,"activate").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{expect(a).not.toHaveBeenCalled(),o()})),t.show()})))),it("should add listener when escape touch is pressed",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t,"hide").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{const e=createEvent("keydown");e.key="Escape",d.dispatchEvent(e)})),d.addEventListener("hidden.bs.modal",(()=>{expect(a).toHaveBeenCalled(),o()})),t.show()})))),it("should do nothing when the pressed key is not escape",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t,"hide"),l=()=>{expect(a).not.toHaveBeenCalled(),o()};d.addEventListener("shown.bs.modal",(()=>{const e=createEvent("keydown");e.key="Tab",d.dispatchEvent(e),setTimeout(l,30)})),t.show()})))),it("should adjust dialog on resize",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t,"_adjustDialog").and.callThrough(),l=()=>{expect(a).toHaveBeenCalled(),o()};d.addEventListener("shown.bs.modal",(()=>{const e=createEvent("resize");window.dispatchEvent(e),setTimeout(l,10)})),t.show()})))),it("should not close modal when clicking on modal-content",(()=>new Promise(((o,d)=>{e.innerHTML=['<div class="modal">','  <div class="modal-dialog">','    <div class="modal-content"></div>',"  </div>","</div>"].join("");const t=e.querySelector(".modal"),a=new Modal(t);t.addEventListener("shown.bs.modal",(()=>{e.querySelector(".modal-dialog").click(),e.querySelector(".modal-content").click(),setTimeout((()=>{expect(a._isShown).toEqual(!0),o()}),10)})),t.addEventListener("hidden.bs.modal",(()=>{d(new Error("Should not hide a modal"))})),a.show()})))),it("should not close modal when clicking outside of modal-content if backdrop = false",(()=>new Promise(((o,d)=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const t=e.querySelector(".modal"),a=new Modal(t,{backdrop:!1});t.addEventListener("shown.bs.modal",(()=>{t.click(),setTimeout((()=>{expect(a._isShown).toBeTrue(),o()}),10)})),t.addEventListener("hidden.bs.modal",(()=>{d(new Error("Should not hide a modal"))})),a.show()})))),it("should not close modal when clicking outside of modal-content if backdrop = static",(()=>new Promise(((o,d)=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const t=e.querySelector(".modal"),a=new Modal(t,{backdrop:"static"});t.addEventListener("shown.bs.modal",(()=>{t.click(),setTimeout((()=>{expect(a._isShown).toBeTrue(),o()}),10)})),t.addEventListener("hidden.bs.modal",(()=>{d(new Error("Should not hide a modal"))})),a.show()})))),it("should close modal when escape key is pressed with keyboard = true and backdrop is static",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d,{backdrop:"static",keyboard:!0});d.addEventListener("shown.bs.modal",(()=>{const e=createEvent("keydown");e.key="Escape",d.dispatchEvent(e),setTimeout((()=>{expect(t._isShown).toBeFalse(),o()}),10)})),t.show()})))),it("should not close modal when escape key is pressed with keyboard = false",(()=>new Promise(((o,d)=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const t=e.querySelector(".modal"),a=new Modal(t,{keyboard:!1});t.addEventListener("shown.bs.modal",(()=>{const e=createEvent("keydown");e.key="Escape",t.dispatchEvent(e),setTimeout((()=>{expect(a._isShown).toBeTrue(),o()}),10)})),t.addEventListener("hidden.bs.modal",(()=>{d(new Error("Should not hide a modal"))})),a.show()})))),it("should not overflow when clicking outside of modal-content if backdrop = static",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog" style="transition-duration: 20ms;"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d,{backdrop:"static"});d.addEventListener("shown.bs.modal",(()=>{d.click(),setTimeout((()=>{expect(d.clientHeight).toEqual(d.scrollHeight),o()}),20)})),t.show()})))),it("should not queue multiple callbacks when clicking outside of modal-content and backdrop = static",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog" style="transition-duration: 50ms;"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d,{backdrop:"static"});d.addEventListener("shown.bs.modal",(()=>{const e=spyOn(t,"_queueCallback").and.callThrough(),a=createEvent("mousedown");d.dispatchEvent(a),d.click(),d.dispatchEvent(a),d.click(),setTimeout((()=>{expect(e).toHaveBeenCalledTimes(1),o()}),20)})),t.show()})))),it("should trap focus",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t._focustrap,"activate").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{expect(a).toHaveBeenCalled(),o()})),t.show()}))))})),describe("hide",(()=>{it("should hide a modal",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t._backdrop,"hide").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.hide()})),d.addEventListener("hide.bs.modal",(e=>{expect(e).toBeDefined()})),d.addEventListener("hidden.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toBeNull(),expect(d.getAttribute("role")).toBeNull(),expect(d.getAttribute("aria-hidden")).toEqual("true"),expect(d.style.display).toEqual("none"),expect(a).toHaveBeenCalled(),o()})),t.show()})))),it("should close modal when clicking outside of modal-content",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=d.querySelector(".modal-dialog"),a=new Modal(d),l=spyOn(a,"hide");d.addEventListener("shown.bs.modal",(()=>{const e=createEvent("mousedown");t.dispatchEvent(e),d.click(),expect(l).not.toHaveBeenCalled(),d.dispatchEvent(e),d.click(),expect(l).toHaveBeenCalled(),o()})),a.show()})))),it("should not close modal when clicking on an element removed from modal content",(()=>new Promise((o=>{e.innerHTML=['<div class="modal">',' <div class="modal-dialog">','   <button class="btn">BTN</button>'," </div>","</div>"].join("");const d=e.querySelector(".modal"),t=d.querySelector(".btn"),a=new Modal(d),l=spyOn(a,"hide");t.addEventListener("click",(()=>{t.remove()})),d.addEventListener("shown.bs.modal",(()=>{d.dispatchEvent(createEvent("mousedown")),t.click(),expect(l).not.toHaveBeenCalled(),o()})),a.show()})))),it("should do nothing is the modal is not shown",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal");new Modal(o).hide(),expect().nothing()})),it("should do nothing is the modal is transitioning",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(o);d._isTransitioning=!0,d.hide(),expect().nothing()})),it("should not hide a modal if hide is prevented",(()=>new Promise(((o,d)=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const t=e.querySelector(".modal"),a=new Modal(t);t.addEventListener("shown.bs.modal",(()=>{a.hide()})),t.addEventListener("hide.bs.modal",(e=>{e.preventDefault(),setTimeout((()=>{expect(a._isShown).toBeTrue(),o()}),10)})),t.addEventListener("hidden.bs.modal",(()=>{d(new Error("should not trigger hidden"))})),a.show()})))),it("should release focus trap",(()=>new Promise((o=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const d=e.querySelector(".modal"),t=new Modal(d),a=spyOn(t._focustrap,"deactivate").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.hide()})),d.addEventListener("hidden.bs.modal",(()=>{expect(a).toHaveBeenCalled(),o()})),t.show()}))))})),describe("dispose",(()=>{it("should dispose a modal",(()=>{e.innerHTML='<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(o),t=d._focustrap,a=spyOn(t,"deactivate").and.callThrough();expect(Modal.getInstance(o)).toEqual(d);const l=spyOn(EventHandler,"off");d.dispose(),expect(Modal.getInstance(o)).toBeNull(),expect(l).toHaveBeenCalledTimes(3),expect(a).toHaveBeenCalled()}))})),describe("handleUpdate",(()=>{it("should call adjust dialog",(()=>{e.innerHTML='<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector(".modal"),d=new Modal(o),t=spyOn(d,"_adjustDialog");d.handleUpdate(),expect(t).toHaveBeenCalled()}))})),describe("data-api",(()=>{it("should toggle modal",(()=>new Promise((o=>{e.innerHTML=['<button type="button" data-bs-toggle="modal" data-bs-target="#exampleModal"></button>','<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-toggle="modal"]');d.addEventListener("shown.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toEqual("true"),expect(d.getAttribute("role")).toEqual("dialog"),expect(d.getAttribute("aria-hidden")).toBeNull(),expect(d.style.display).toEqual("block"),expect(document.querySelector(".modal-backdrop")).not.toBeNull(),setTimeout((()=>t.click()),10)})),d.addEventListener("hidden.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toBeNull(),expect(d.getAttribute("role")).toBeNull(),expect(d.getAttribute("aria-hidden")).toEqual("true"),expect(d.style.display).toEqual("none"),expect(document.querySelector(".modal-backdrop")).toBeNull(),o()})),t.click()})))),it("should not recreate a new modal",(()=>new Promise((o=>{e.innerHTML=['<button type="button" data-bs-toggle="modal" data-bs-target="#exampleModal"></button>','<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=new Modal(d),a=e.querySelector('[data-bs-toggle="modal"]'),l=spyOn(t,"show").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{expect(l).toHaveBeenCalled(),o()})),a.click()})))),it("should prevent default when the trigger is <a> or <area>",(()=>new Promise((o=>{e.innerHTML=['<a data-bs-toggle="modal" href="#" data-bs-target="#exampleModal"></a>','<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-toggle="modal"]'),a=spyOn(Event.prototype,"preventDefault").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{expect(d.getAttribute("aria-modal")).toEqual("true"),expect(d.getAttribute("role")).toEqual("dialog"),expect(d.getAttribute("aria-hidden")).toBeNull(),expect(d.style.display).toEqual("block"),expect(document.querySelector(".modal-backdrop")).not.toBeNull(),expect(a).toHaveBeenCalled(),o()})),t.click()})))),it("should focus the trigger on hide",(()=>new Promise((o=>{e.innerHTML=['<a data-bs-toggle="modal" href="#" data-bs-target="#exampleModal"></a>','<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-toggle="modal"]'),a=spyOn(t,"focus");d.addEventListener("shown.bs.modal",(()=>{Modal.getInstance(d).hide()})),d.addEventListener("hidden.bs.modal",(()=>{setTimeout((()=>{expect(a).toHaveBeenCalled(),o()}),20)})),t.click()})))),it('should not prevent default when a click occurred on data-bs-dismiss="modal" where tagName is DIFFERENT than <a> or <area>',(()=>new Promise((o=>{e.innerHTML=['<div class="modal">','  <div class="modal-dialog">','    <button type="button" data-bs-dismiss="modal"></button>',"  </div>","</div>"].join("");const d=e.querySelector(".modal"),t=e.querySelector('button[data-bs-dismiss="modal"]'),a=new Modal(d),l=spyOn(Event.prototype,"preventDefault").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.click()})),d.addEventListener("hidden.bs.modal",(()=>{expect(l).not.toHaveBeenCalled(),o()})),a.show()})))),it('should prevent default when a click occurred on data-bs-dismiss="modal" where tagName is <a> or <area>',(()=>new Promise((o=>{e.innerHTML=['<div class="modal">','  <div class="modal-dialog">','    <a type="button" data-bs-dismiss="modal"></a>',"  </div>","</div>"].join("");const d=e.querySelector(".modal"),t=e.querySelector('a[data-bs-dismiss="modal"]'),a=new Modal(d),l=spyOn(Event.prototype,"preventDefault").and.callThrough();d.addEventListener("shown.bs.modal",(()=>{t.click()})),d.addEventListener("hidden.bs.modal",(()=>{expect(l).toHaveBeenCalled(),o()})),a.show()})))),it("should not focus the trigger if the modal is not visible",(()=>new Promise((o=>{e.innerHTML=['<a data-bs-toggle="modal" href="#" data-bs-target="#exampleModal" style="display: none;"></a>','<div id="exampleModal" class="modal" style="display: none;"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-toggle="modal"]'),a=spyOn(t,"focus");d.addEventListener("shown.bs.modal",(()=>{Modal.getInstance(d).hide()})),d.addEventListener("hidden.bs.modal",(()=>{setTimeout((()=>{expect(a).not.toHaveBeenCalled(),o()}),20)})),t.click()})))),it("should not focus the trigger if the modal is not shown",(()=>new Promise((o=>{e.innerHTML=['<a data-bs-toggle="modal" href="#" data-bs-target="#exampleModal"></a>','<div id="exampleModal" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector(".modal"),t=e.querySelector('[data-bs-toggle="modal"]'),a=spyOn(t,"focus");d.addEventListener("show.bs.modal",(e=>{e.preventDefault(),setTimeout((()=>{expect(a).not.toHaveBeenCalled(),o()}),10)})),t.click()})))),it("should call hide first, if another modal is open",(()=>new Promise((o=>{e.innerHTML=['<button data-bs-toggle="modal"  data-bs-target="#modal2"></button>','<div id="modal1" class="modal fade"><div class="modal-dialog"></div></div>','<div id="modal2" class="modal"><div class="modal-dialog"></div></div>'].join("");const d=e.querySelector("button"),t=document.querySelector("#modal1"),a=document.querySelector("#modal2"),l=new Modal(t);t.addEventListener("shown.bs.modal",(()=>{d.click()})),t.addEventListener("hidden.bs.modal",(()=>{expect(Modal.getInstance(a)).not.toBeNull(),expect(a).toHaveClass("show"),o()})),l.show()}))))})),describe("jQueryInterface",(()=>{it("should create a modal",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div");jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.modal.call(jQueryMock),expect(Modal.getInstance(o)).not.toBeNull()})),it("should create a modal with given config",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div");jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.modal.call(jQueryMock,{keyboard:!1});const d=spyOn(Modal.prototype,"constructor");expect(d).not.toHaveBeenCalledWith(o,{keyboard:!1});const t=Modal.getInstance(o);expect(t).not.toBeNull(),expect(t._config.keyboard).toBeFalse()})),it("should not re create a modal",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div"),d=new Modal(o);jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.modal.call(jQueryMock),expect(Modal.getInstance(o)).toEqual(d)})),it("should throw error on undefined method",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div"),d="undefinedMethod";jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o],expect((()=>{jQueryMock.fn.modal.call(jQueryMock,d)})).toThrowError(TypeError,`No method named "${d}"`)})),it("should call show method",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div"),d=new Modal(o);jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o];const t=spyOn(d,"show");jQueryMock.fn.modal.call(jQueryMock,"show"),expect(t).toHaveBeenCalled()})),it("should not call show method",(()=>{e.innerHTML='<div class="modal" data-bs-show="false"><div class="modal-dialog"></div></div>';const o=e.querySelector("div");jQueryMock.fn.modal=Modal.jQueryInterface,jQueryMock.elements=[o];const d=spyOn(Modal.prototype,"show");jQueryMock.fn.modal.call(jQueryMock),expect(d).not.toHaveBeenCalled()}))})),describe("getInstance",(()=>{it("should return modal instance",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div"),d=new Modal(o);expect(Modal.getInstance(o)).toEqual(d),expect(Modal.getInstance(o)).toBeInstanceOf(Modal)})),it("should return null when there is no modal instance",(()=>{e.innerHTML='<div class="modal"><div class="modal-dialog"></div></div>';const o=e.querySelector("div");expect(Modal.getInstance(o)).toBeNull()}))})),describe("getOrCreateInstance",(()=>{it("should return modal instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),d=new Modal(o);expect(Modal.getOrCreateInstance(o)).toEqual(d),expect(Modal.getInstance(o)).toEqual(Modal.getOrCreateInstance(o,{})),expect(Modal.getOrCreateInstance(o)).toBeInstanceOf(Modal)})),it("should return new instance when there is no modal instance",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Modal.getInstance(o)).toBeNull(),expect(Modal.getOrCreateInstance(o)).toBeInstanceOf(Modal)})),it("should return new instance when there is no modal instance with given configuration",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Modal.getInstance(o)).toBeNull();const d=Modal.getOrCreateInstance(o,{backdrop:!0});expect(d).toBeInstanceOf(Modal),expect(d._config.backdrop).toBeTrue()})),it("should return the instance when exists without given configuration",(()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),d=new Modal(o,{backdrop:!0});expect(Modal.getInstance(o)).toEqual(d);const t=Modal.getOrCreateInstance(o,{backdrop:!1});expect(d).toBeInstanceOf(Modal),expect(t).toEqual(d),expect(t._config.backdrop).toBeTrue()}))}))}));