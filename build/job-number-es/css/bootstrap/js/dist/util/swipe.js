/*! For license information please see swipe.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("./config"),require("../dom/event-handler"),require("./index")):"function"==typeof define&&define.amd?define(["./config","../dom/event-handler","./index"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).Swipe=e(t.Config,t.EventHandler,t.Index)}(this,(function(t,e,n){"use strict";const i=t=>t&&"object"==typeof t&&"default"in t?t:{default:t},s=i(t),o=i(e),l=".bs.swipe",a=`touchstart${l}`,u=`touchmove${l}`,h=`touchend${l}`,r=`pointerdown${l}`,c=`pointerup${l}`,d={endCallback:null,leftCallback:null,rightCallback:null},f={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class _ extends s.default{constructor(t,e){super(),this._element=t,t&&_.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return d}static get DefaultType(){return f}static get NAME(){return"swipe"}dispose(){o.default.off(this._element,l)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),n.execute(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&n.execute(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(o.default.on(this._element,r,(t=>this._start(t))),o.default.on(this._element,c,(t=>this._end(t))),this._element.classList.add("pointer-event")):(o.default.on(this._element,a,(t=>this._start(t))),o.default.on(this._element,u,(t=>this._move(t))),o.default.on(this._element,h,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}return _}));