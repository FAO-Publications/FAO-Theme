import Tooltip from"../../src/tooltip";import EventHandler from"../../src/dom/event-handler";import{noop}from"../../src/util/index";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";describe("Tooltip",(()=>{let e;beforeAll((()=>{e=getFixture()})),afterEach((()=>{clearFixture();for(const e of document.querySelectorAll(".tooltip"))e.remove()})),describe("VERSION",(()=>{it("should return plugin version",(()=>{expect(Tooltip.VERSION).toEqual(jasmine.any(String))}))})),describe("Default",(()=>{it("should return plugin default config",(()=>{expect(Tooltip.Default).toEqual(jasmine.any(Object))}))})),describe("NAME",(()=>{it("should return plugin name",(()=>{expect(Tooltip.NAME).toEqual(jasmine.any(String))}))})),describe("DATA_KEY",(()=>{it("should return plugin data key",(()=>{expect(Tooltip.DATA_KEY).toEqual("bs.tooltip")}))})),describe("EVENT_KEY",(()=>{it("should return plugin event key",(()=>{expect(Tooltip.EVENT_KEY).toEqual(".bs.tooltip")}))})),describe("DefaultType",(()=>{it("should return plugin default type",(()=>{expect(Tooltip.DefaultType).toEqual(jasmine.any(Object))}))})),describe("constructor",(()=>{it("should take care of element either passed as a CSS selector or DOM element",(()=>{e.innerHTML='<a href="#" id="tooltipEl" rel="tooltip" title="Nice and short title">';const t=e.querySelector("#tooltipEl"),o=new Tooltip("#tooltipEl"),i=new Tooltip(t);expect(o._element).toEqual(t),expect(i._element).toEqual(t)})),it("should not take care of disallowed data attributes",(()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-sanitize="false" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._config.sanitize).toBeTrue()})),it("should convert title and content to string if numbers",(()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{title:1,content:7});expect(o._config.title).toEqual("1"),expect(o._config.content).toEqual("7")})),it("should enable selector delegation",(()=>new Promise((t=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),i=new Tooltip(o,{selector:'a[rel="tooltip"]',trigger:"click"});o.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const n=o.querySelector("a");n.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),i.dispose(),t()})),n.click()})))),it("should create offset modifier when offset is passed as a function",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Offset from function">';const o=jasmine.createSpy("getOffset").and.returnValue([10,20]),i=e.querySelector("a"),n=new Tooltip(i,{offset:o,popperConfig:{onFirstUpdate(e){expect(o).toHaveBeenCalledWith({popper:e.rects.popper,reference:e.rects.reference,placement:e.placement},i),t()}}}),l=n._getOffset();expect(l).toEqual(jasmine.any(Function)),n.show()})))),it("should create offset modifier when offset option is passed in data attribute",(()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-offset="10,20" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._getOffset()).toEqual([10,20])})),it("should allow to pass config to Popper with `popperConfig`",(()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{popperConfig:{placement:"left"}})._getPopperConfig("top");expect(o.placement).toEqual("left")})),it("should allow to pass config to Popper with `popperConfig` as a function",(()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=jasmine.createSpy("getPopperConfig").and.returnValue({placement:"left"}),i=new Tooltip(t,{popperConfig:o})._getPopperConfig("top");expect(o).toHaveBeenCalled(),expect(i.placement).toEqual("left")})),it('should use original title, if not "data-bs-title" is given',(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._getTitle()).toEqual("Another tooltip")}))})),describe("enable",(()=>{it("should enable a tooltip",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);i.enable(),o.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()})),i.show()}))))})),describe("disable",(()=>{it("should disable tooltip",(()=>new Promise(((t,o)=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const i=e.querySelector("a"),n=new Tooltip(i);n.disable(),i.addEventListener("show.bs.tooltip",(()=>{o(new Error("should not show a disabled tooltip"))})),n.show(),setTimeout((()=>{expect().nothing(),t()}),10)}))))})),describe("toggleEnabled",(()=>{it("should toggle enabled",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._isEnabled).toBeTrue(),o.toggleEnabled(),expect(o._isEnabled).toBeFalse()}))})),describe("toggle",(()=>{it("should do nothing if disabled",(()=>new Promise(((t,o)=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const i=e.querySelector("a"),n=new Tooltip(i);n.disable(),i.addEventListener("show.bs.tooltip",(()=>{o(new Error("should not show a disabled tooltip"))})),n.toggle(),setTimeout((()=>{expect().nothing(),t()}),10)})))),it("should show a tooltip",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()})),i.toggle()})))),it('should call toggle and show the tooltip when trigger is "click"',(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{trigger:"click"}),n=spyOn(i,"toggle").and.callThrough();o.addEventListener("shown.bs.tooltip",(()=>{expect(n).toHaveBeenCalled(),t()})),o.click()})))),it("should hide a tooltip",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{i.toggle()})),o.addEventListener("hidden.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).toBeNull(),t()})),i.toggle()})))),it('should call toggle and hide the tooltip when trigger is "click"',(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{trigger:"click"}),n=spyOn(i,"toggle").and.callThrough();o.addEventListener("shown.bs.tooltip",(()=>{o.click()})),o.addEventListener("hidden.bs.tooltip",(()=>{expect(n).toHaveBeenCalled(),t()})),o.click()}))))})),describe("dispose",(()=>{it("should destroy a tooltip",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=spyOn(t,"addEventListener").and.callThrough(),i=spyOn(t,"removeEventListener").and.callThrough(),n=new Tooltip(t);expect(Tooltip.getInstance(t)).toEqual(n);const l=[["mouseover",jasmine.any(Function),jasmine.any(Boolean)],["mouseout",jasmine.any(Function),jasmine.any(Boolean)],["focusin",jasmine.any(Function),jasmine.any(Boolean)],["focusout",jasmine.any(Function),jasmine.any(Boolean)]];expect(o.calls.allArgs()).toEqual(l),n.dispose(),expect(Tooltip.getInstance(t)).toBeNull(),expect(i.calls.allArgs()).toEqual(l)})),it("should destroy a tooltip after it is shown and hidden",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{i.hide()})),o.addEventListener("hidden.bs.tooltip",(()=>{i.dispose(),expect(i.tip).toBeNull(),expect(Tooltip.getInstance(o)).toBeNull(),t()})),i.show()})))),it("should destroy a tooltip and remove it from the dom",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),i.dispose(),expect(document.querySelector(".tooltip")).toBeNull(),t()})),i.show()})))),it("should destroy a tooltip and reset it's initial title",(()=>{e.innerHTML=['<span id="tooltipWithTitle" rel="tooltip" title="tooltipTitle"></span>','<span id="tooltipWithoutTitle" rel="tooltip" data-bs-title="tooltipTitle"></span>'].join("");const t=e.querySelector("#tooltipWithTitle"),o=new Tooltip("#tooltipWithTitle");expect(t.getAttribute("title")).toBeNull(),o.dispose(),expect(t.getAttribute("title")).toBe("tooltipTitle");const i=e.querySelector("#tooltipWithoutTitle"),n=new Tooltip("#tooltipWithTitle");expect(i.getAttribute("title")).toBeNull(),n.dispose(),expect(i.getAttribute("title")).toBeNull()}))})),describe("show",(()=>{it("should show a tooltip",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-describedby")).toEqual(e.getAttribute("id")),expect(e.getAttribute("id")).toContain("tooltip"),t()})),i.show()})))),it("should show a tooltip when hovering a child element",(()=>new Promise((t=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','  <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 100 100">','    <rect width="100%" fill="#563d7c"/>','    <circle cx="50" cy="50" r="30" fill="#fff"/>',"  </svg>","</a>"].join("");const o=e.querySelector("a"),i=new Tooltip(o),n=spyOn(i,"show");o.querySelector("rect").dispatchEvent(createEvent("mouseover",{bubbles:!0})),setTimeout((()=>{expect(n).toHaveBeenCalled(),t()}),0)})))),it("should show a tooltip on mobile",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);document.documentElement.ontouchstart=noop;const n=spyOn(EventHandler,"on").and.callThrough();o.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),expect(n).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=void 0,t()})),i.show()})))),it("should show a tooltip relative to placement option",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{placement:"bottom"});o.addEventListener("inserted.bs.tooltip",(()=>{expect(i._getTipElement()).toHaveClass("bs-tooltip-auto")})),o.addEventListener("shown.bs.tooltip",(()=>{expect(i._getTipElement()).toHaveClass("bs-tooltip-auto"),expect(i._getTipElement().getAttribute("data-popper-placement")).toEqual("bottom"),t()})),i.show()})))),it("should not error when trying to show a tooltip that has been removed from the dom",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o),n=()=>{o.removeEventListener("shown.bs.tooltip",n);let e=document.querySelector(".tooltip");e.remove(),o.addEventListener("shown.bs.tooltip",(()=>{e=document.querySelector(".tooltip"),expect(e).not.toBeNull(),t()})),i.show()};o.addEventListener("shown.bs.tooltip",n),i.show()})))),it("should show a tooltip with a dom element container",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{container:e});o.addEventListener("shown.bs.tooltip",(()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()})),i.show()})))),it("should show a tooltip with a jquery element container",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{container:{0:e,jquery:"jQuery"}});o.addEventListener("shown.bs.tooltip",(()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()})),i.show()})))),it("should show a tooltip with a selector in container",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{container:"#fixture"});o.addEventListener("shown.bs.tooltip",(()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()})),i.show()})))),it("should show a tooltip with placement as a function",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=jasmine.createSpy("placement").and.returnValue("top"),i=e.querySelector("a"),n=new Tooltip(i,{placement:o});i.addEventListener("shown.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),expect(o).toHaveBeenCalled(),t()})),n.show()})))),it("should show a tooltip without the animation",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{animation:!1});o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e).not.toHaveClass("fade"),t()})),i.show()})))),it("should throw an error the element is not visible",(()=>{e.innerHTML='<a href="#" style="display: none" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);try{o.show()}catch(e){expect(e.message).toEqual("Please use show on visible elements")}})),it("should not show a tooltip if show.bs.tooltip is prevented",(()=>new Promise(((t,o)=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const i=e.querySelector("a"),n=new Tooltip(i);i.addEventListener("show.bs.tooltip",(e=>{e.preventDefault(),setTimeout((()=>{expect(document.querySelector(".tooltip")).toBeNull(),t()}),10)})),i.addEventListener("shown.bs.tooltip",(()=>{o(new Error("Tooltip should not be shown"))})),n.show()})))),it("should show tooltip if leave event hasn't occurred before delay expires",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{delay:150}),n=spyOn(i,"show");setTimeout((()=>{expect(n).not.toHaveBeenCalled()}),100),setTimeout((()=>{expect(n).toHaveBeenCalled(),t()}),200),o.dispatchEvent(createEvent("mouseover"))})))),it("should not show tooltip if leave event occurs before delay expires",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{delay:150}),n=spyOn(i,"show");setTimeout((()=>{expect(n).not.toHaveBeenCalled(),o.dispatchEvent(createEvent("mouseover"))}),100),setTimeout((()=>{expect(n).toHaveBeenCalled(),expect(document.querySelectorAll(".tooltip")).toHaveSize(0),t()}),200),o.dispatchEvent(createEvent("mouseover"))})))),it("should not hide tooltip if leave event occurs and enter event occurs within the hide delay",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip" data-bs-delay=\'{"show":0,"hide":150}\'>';const o=e.querySelector("a"),i=new Tooltip(o);expect(i._config.delay).toEqual({show:0,hide:150}),setTimeout((()=>{expect(i._getTipElement()).toHaveClass("show"),o.dispatchEvent(createEvent("mouseout")),setTimeout((()=>{expect(i._getTipElement()).toHaveClass("show"),o.dispatchEvent(createEvent("mouseover"))}),100),setTimeout((()=>{expect(i._getTipElement()).toHaveClass("show"),expect(document.querySelectorAll(".tooltip")).toHaveSize(1),t()}),200)}),10),o.dispatchEvent(createEvent("mouseover"))})))),it("should not hide tooltip if leave event occurs and interaction remains inside trigger",(()=>new Promise((t=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">',"<b>Trigger</b>","the tooltip","</a>"].join("");const o=e.querySelector("a"),i=new Tooltip(o),n=o.querySelector("b"),l=spyOn(i,"hide").and.callThrough();o.addEventListener("mouseover",(()=>{const e=createEvent("mouseout");Object.defineProperty(e,"relatedTarget",{value:n}),o.dispatchEvent(e)})),o.addEventListener("mouseout",(()=>{expect(l).not.toHaveBeenCalled(),t()})),o.dispatchEvent(createEvent("mouseover"))})))),it("should properly maintain tooltip state if leave event occurs and enter event occurs during hide transition",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip" data-bs-placement="top" style="position:fixed;left:50%;top:50%;">Trigger</a>';const o=e.querySelector("a"),i=new Tooltip(o);spyOn(window,"getComputedStyle").and.returnValue({transitionDuration:"0.15s",transitionDelay:"0s"}),setTimeout((()=>{expect(i._popper).not.toBeNull(),expect(i._getTipElement().getAttribute("data-popper-placement")).toEqual("top"),o.dispatchEvent(createEvent("mouseout")),setTimeout((()=>{expect(i._getTipElement()).not.toHaveClass("show"),o.dispatchEvent(createEvent("mouseover"))}),100),setTimeout((()=>{expect(i._popper).not.toBeNull(),expect(i._getTipElement().getAttribute("data-popper-placement")).toEqual("top"),t()}),200)}),10),o.dispatchEvent(createEvent("mouseover"))})))),it("should only trigger inserted event if a new tooltip element was created",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);spyOn(window,"getComputedStyle").and.returnValue({transitionDuration:"0.15s",transitionDelay:"0s"});const n=jasmine.createSpy();o.addEventListener("inserted.bs.tooltip",n),setTimeout((()=>{expect(n).toHaveBeenCalledTimes(1),i.hide(),setTimeout((()=>{i.show()}),100),setTimeout((()=>{expect(n).toHaveBeenCalledTimes(2),t()}),200)}),0),i.show()})))),it("should show a tooltip with custom class provided in data attributes",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip" data-bs-custom-class="custom-class">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e).toHaveClass("custom-class"),t()})),i.show()})))),it("should show a tooltip with custom class provided as a string in config",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{customClass:"custom-class custom-class-2"});o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e).toHaveClass("custom-class"),expect(e).toHaveClass("custom-class-2"),t()})),i.show()})))),it("should show a tooltip with custom class provided as a function in config",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=jasmine.createSpy("customClass").and.returnValue("custom-class"),i=e.querySelector("a"),n=new Tooltip(i,{customClass:o});i.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o).toHaveBeenCalled(),expect(e).toHaveClass("custom-class"),t()})),n.show()})))),it("should remove `title` attribute if exists",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{expect(o.getAttribute("title")).toBeNull(),t()})),i.show()}))))})),describe("hide",(()=>{it("should hide a tooltip",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>i.hide())),o.addEventListener("hidden.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(o.getAttribute("aria-describedby")).toBeNull(),t()})),i.show()})))),it("should hide a tooltip on mobile",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o),n=spyOn(EventHandler,"off");o.addEventListener("shown.bs.tooltip",(()=>{document.documentElement.ontouchstart=noop,i.hide()})),o.addEventListener("hidden.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(n).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=void 0,t()})),i.show()})))),it("should hide a tooltip without animation",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o,{animation:!1});o.addEventListener("shown.bs.tooltip",(()=>i.hide())),o.addEventListener("hidden.bs.tooltip",(()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(o.getAttribute("aria-describedby")).toBeNull(),t()})),i.show()})))),it("should not hide a tooltip if hide event is prevented",(()=>new Promise(((t,o)=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const i=e.querySelector("a"),n=new Tooltip(i,{animation:!1});i.addEventListener("shown.bs.tooltip",(()=>n.hide())),i.addEventListener("hide.bs.tooltip",(e=>{e.preventDefault(),setTimeout((()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()}),20)})),i.addEventListener("hidden.bs.tooltip",(()=>{o(new Error("should not trigger hidden event"))})),n.show()})))),it("should not throw error running hide if popper hasn't been shown",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);try{o.hide(),expect().nothing()}catch{throw new Error("should not throw error")}}))})),describe("update",(()=>{it("should call popper update",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=spyOn(i._popper,"update");i.update(),expect(e).toHaveBeenCalled(),t()})),i.show()})))),it("should do nothing if the tooltip is not shown",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a");new Tooltip(t).update(),expect().nothing()}))})),describe("_isWithContent",(()=>{it("should return true if there is content",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._isWithContent()).toBeTrue()})),it("should return false if there is no content",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._isWithContent()).toBeFalse()}))})),describe("_getTipElement",(()=>{it("should create the tip element and return it",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t),i=spyOn(document,"createElement").and.callThrough();expect(o._getTipElement()).toBeDefined(),expect(i).toHaveBeenCalled()})),it("should return the created tip element",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t),i=spyOn(document,"createElement").and.callThrough();expect(o._getTipElement()).toBeDefined(),expect(i).toHaveBeenCalled(),i.calls.reset(),expect(o._getTipElement()).toBeDefined(),expect(i).not.toHaveBeenCalled()}))})),describe("setContent",(()=>{it("should set tip content",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{animation:!1}),i=o._getTipElement();o.setContent(i),expect(i).not.toHaveClass("show"),expect(i).not.toHaveClass("fade"),expect(i.querySelector(".tooltip-inner").textContent).toEqual("Another tooltip")})),it("should re-show tip if it was already shown",(()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);o.show();const i=()=>o._getTipElement();expect(i()).toHaveClass("show"),o.setContent({".tooltip-inner":"foo"}),expect(i()).toHaveClass("show"),expect(i().querySelector(".tooltip-inner").textContent).toEqual("foo")})),it("should keep tip hidden, if it was already hidden before",(()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t),i=()=>o._getTipElement();expect(i()).not.toHaveClass("show"),o.setContent({".tooltip-inner":"foo"}),expect(i()).not.toHaveClass("show"),o.show(),expect(i().querySelector(".tooltip-inner").textContent).toEqual("foo")})),it('"setContent" should keep the initial template',(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);o.setContent({".tooltip-inner":"foo"});const i=o._getTipElement();expect(i).toHaveClass("tooltip"),expect(i).toHaveClass("bs-tooltip-auto"),expect(i.querySelector(".tooltip-arrow")).not.toBeNull(),expect(i.querySelector(".tooltip-inner")).not.toBeNull()}))})),describe("setContent",(()=>{it("should do nothing if the element is null",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a");new Tooltip(t).setContent({".tooltip":null}),expect().nothing()})),it("should do nothing if the content is a child of the element",(()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','  <div id="childContent"></div>',"</a>"].join("");const t=e.querySelector("a"),o=e.querySelector("div"),i=new Tooltip(t,{html:!0});i._getTipElement().append(o),i.setContent({".tooltip":o}),expect().nothing()})),it("should add the content as a child of the element for jQuery elements",(()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','  <div id="childContent"></div>',"</a>"].join("");const t=e.querySelector("a"),o=e.querySelector("div"),i=new Tooltip(t,{html:!0});i.setContent({".tooltip":{0:o,jquery:"jQuery"}}),i.show(),expect(o.parentNode).toEqual(i._getTipElement())})),it("should add the child text content in the element",(()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','  <div id="childContent">Tooltip</div>',"</a>"].join("");const t=e.querySelector("a"),o=e.querySelector("div"),i=new Tooltip(t);i.setContent({".tooltip":o}),expect(o.textContent).toEqual(i._getTipElement().textContent)})),it("should add html without sanitize it",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t,{sanitize:!1,html:!0});o.setContent({".tooltip":'<div id="childContent">Tooltip</div>'}),expect(o._getTipElement().querySelector("div").id).toEqual("childContent")})),it("should add html sanitized",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t,{html:!0}),i=['<div id="childContent">','  <button type="button">test btn</button>',"</div>"].join("");o.setContent({".tooltip":i}),expect(o._getTipElement().querySelector("div").id).toEqual("childContent"),expect(o._getTipElement().querySelector("button")).toBeNull()})),it("should add text content",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t);o.setContent({".tooltip":"test"}),expect(o._getTipElement().textContent).toEqual("test")}))})),describe("_getTitle",(()=>{it("should return the title",(()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._getTitle()).toEqual("Another tooltip")})),it("should call title function",(()=>{e.innerHTML='<a href="#" rel="tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t,{title:()=>"test"});expect(o._getTitle()).toEqual("test")}))})),describe("getInstance",(()=>{it("should return tooltip instance",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);expect(Tooltip.getInstance(t)).toEqual(o),expect(Tooltip.getInstance(t)).toBeInstanceOf(Tooltip)})),it("should return null when there is no tooltip instance",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toBeNull()}))})),describe("aria-label",(()=>{it("should add the aria-label attribute for referencing original title",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toEqual("Another tooltip"),t()})),i.show()})))),it("should add the aria-label attribute when element text content is a whitespace string",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="A tooltip"><span>    </span></a>';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toEqual("A tooltip"),t()})),i.show()})))),it("should not add the aria-label attribute if the attribute already exists",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" aria-label="Different label" title="Another tooltip"></a>';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toEqual("Different label"),t()})),i.show()})))),it("should not add the aria-label attribute if the element has text content",(()=>new Promise((t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">text content</a>';const o=e.querySelector("a"),i=new Tooltip(o);o.addEventListener("shown.bs.tooltip",(()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toBeNull(),t()})),i.show()}))))})),describe("getOrCreateInstance",(()=>{it("should return tooltip instance",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);expect(Tooltip.getOrCreateInstance(t)).toEqual(o),expect(Tooltip.getInstance(t)).toEqual(Tooltip.getOrCreateInstance(t,{})),expect(Tooltip.getOrCreateInstance(t)).toBeInstanceOf(Tooltip)})),it("should return new instance when there is no tooltip instance",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toBeNull(),expect(Tooltip.getOrCreateInstance(t)).toBeInstanceOf(Tooltip)})),it("should return new instance when there is no tooltip instance with given configuration",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toBeNull();const o=Tooltip.getOrCreateInstance(t,{title:()=>"test"});expect(o).toBeInstanceOf(Tooltip),expect(o._getTitle()).toEqual("test")})),it("should return the instance when exists without given configuration",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t,{title:()=>"nothing"});expect(Tooltip.getInstance(t)).toEqual(o);const i=Tooltip.getOrCreateInstance(t,{title:()=>"test"});expect(o).toBeInstanceOf(Tooltip),expect(i).toEqual(o),expect(i._getTitle()).toEqual("nothing")}))})),describe("jQueryInterface",(()=>{it("should create a tooltip",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock),expect(Tooltip.getInstance(t)).not.toBeNull()})),it("should not re create a tooltip",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock),expect(Tooltip.getInstance(t)).toEqual(o)})),it("should call a tooltip method",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t),i=spyOn(o,"show");jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock,"show"),expect(Tooltip.getInstance(t)).toEqual(o),expect(i).toHaveBeenCalled()})),it("should throw error on undefined method",(()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o="undefinedMethod";jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],expect((()=>{jQueryMock.fn.tooltip.call(jQueryMock,o)})).toThrowError(TypeError,`No method named "${o}"`)}))}))}));