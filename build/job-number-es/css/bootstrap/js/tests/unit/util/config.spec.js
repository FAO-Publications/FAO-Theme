import Config from"../../../src/util/config";import{clearFixture,getFixture}from"../../helpers/fixture";class DummyConfigClass extends Config{static get NAME(){return"dummy"}}describe("Config",(()=>{let t;beforeAll((()=>{t=getFixture()})),afterEach((()=>{clearFixture()})),describe("NAME",(()=>{it("should return plugin NAME",(()=>{expect(DummyConfigClass.NAME).toEqual("dummy")}))})),describe("DefaultType",(()=>{it("should return plugin default type",(()=>{expect(DummyConfigClass.DefaultType).toEqual(jasmine.any(Object))}))})),describe("Default",(()=>{it("should return plugin defaults",(()=>{expect(DummyConfigClass.Default).toEqual(jasmine.any(Object))}))})),describe("mergeConfigObj",(()=>{it("should parse element's data attributes and merge it with default config. Element's data attributes must excel Defaults",(()=>{t.innerHTML='<div id="test" data-bs-test-bool="false" data-bs-test-int="8" data-bs-test-string1="bar"></div>',spyOnProperty(DummyConfigClass,"Default","get").and.returnValue({testBool:!0,testString:"foo",testString1:"foo",testInt:7});const e=(new DummyConfigClass)._mergeConfigObj({},t.querySelector("#test"));expect(e.testBool).toEqual(!1),expect(e.testString).toEqual("foo"),expect(e.testString1).toEqual("bar"),expect(e.testInt).toEqual(8)})),it("should parse element's data attributes and merge it with default config, plug these given during method call. The programmatically given should excel all",(()=>{t.innerHTML='<div id="test" data-bs-test-bool="false" data-bs-test-int="8" data-bs-test-string-1="bar"></div>',spyOnProperty(DummyConfigClass,"Default","get").and.returnValue({testBool:!0,testString:"foo",testString1:"foo",testInt:7});const e=(new DummyConfigClass)._mergeConfigObj({testString1:"test",testInt:3},t.querySelector("#test"));expect(e.testBool).toEqual(!1),expect(e.testString).toEqual("foo"),expect(e.testString1).toEqual("test"),expect(e.testInt).toEqual(3)})),it("should parse element's data attribute `config` and any rest attributes. The programmatically given should excel all. Data attribute `config` should excel only Defaults",(()=>{t.innerHTML='<div id="test" data-bs-config=\'{"testBool":false,"testInt":50,"testInt2":100}\' data-bs-test-int="8" data-bs-test-string-1="bar"></div>',spyOnProperty(DummyConfigClass,"Default","get").and.returnValue({testBool:!0,testString:"foo",testString1:"foo",testInt:7,testInt2:600});const e=(new DummyConfigClass)._mergeConfigObj({testString1:"test"},t.querySelector("#test"));expect(e.testBool).toEqual(!1),expect(e.testString).toEqual("foo"),expect(e.testString1).toEqual("test"),expect(e.testInt).toEqual(8),expect(e.testInt2).toEqual(100)})),it("should omit element's data attribute `config` if is not an object",(()=>{t.innerHTML='<div id="test" data-bs-config="foo" data-bs-test-int="8"></div>',spyOnProperty(DummyConfigClass,"Default","get").and.returnValue({testInt:7,testInt2:79});const e=(new DummyConfigClass)._mergeConfigObj({},t.querySelector("#test"));expect(e.testInt).toEqual(8),expect(e.testInt2).toEqual(79)}))})),describe("typeCheckConfig",(()=>{it("should check type of the config object",(()=>{spyOnProperty(DummyConfigClass,"DefaultType","get").and.returnValue({toggle:"boolean",parent:"(string|element)"});const t={toggle:!0,parent:777},e=new DummyConfigClass;expect((()=>{e._typeCheckConfig(t)})).toThrowError(TypeError,e.constructor.NAME.toUpperCase()+': Option "parent" provided type "number" but expected type "(string|element)".')})),it("should return null stringified when null is passed",(()=>{spyOnProperty(DummyConfigClass,"DefaultType","get").and.returnValue({toggle:"boolean",parent:"(null|element)"}),(new DummyConfigClass)._typeCheckConfig({toggle:!0,parent:null}),expect().nothing()})),it("should return undefined stringified when undefined is passed",(()=>{spyOnProperty(DummyConfigClass,"DefaultType","get").and.returnValue({toggle:"boolean",parent:"(undefined|element)"});(new DummyConfigClass)._typeCheckConfig({toggle:!0,parent:void 0}),expect().nothing()}))}))}));